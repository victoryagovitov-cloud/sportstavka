"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ MarathonBet
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import logging
import re
import time
from typing import List, Dict, Any, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By


class EnhancedMobileMarathonBetScraper:
    """
    –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç:
    - –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–°–∞–π—Ö–∞–º–∞–∫–∞–≤–Ω vs –°–ò–°)
    - –†–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ (0:1) 
    - –í—Ä–µ–º—è –º–∞—Ç—á–∞ (11:15)
    - –õ–∏–≥—É (–ò–Ω–¥–∏—è. –ú–∏–∑–æ—Ä–∞–º. –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞)
    - –í—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (1, X, 2, 1X, 12, X2, —Ñ–æ—Ä–∞, —Ç–æ—Ç–∞–ª)
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.driver = None
        
        self.mobile_urls = {
            'football': 'https://mobile.marathonbet.ru/su/sport/live/26418',
            'tennis': 'https://mobile.marathonbet.ru/su/sport/live/22723',
            'table_tennis': 'https://mobile.marathonbet.ru/su/sport/live/414329',
            'handball': 'https://mobile.marathonbet.ru/su/sport/live/26422'
        }
    
    def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium"""
        if self.driver:
            return
            
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--window-size=375,812')
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1')
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.logger.info("‚úÖ Enhanced Selenium –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    def get_complete_matches_data(self, sport: str = 'football') -> List[Dict[str, Any]]:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        
        Returns:
            List[Dict]: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
        """
        
        if sport not in self.mobile_urls:
            self.logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–ø–æ—Ä—Ç: {sport}")
            return []
        
        url = self.mobile_urls[sport]
        self.logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {sport} –∏–∑: {url}")
        
        try:
            self._setup_driver()
            self.driver.get(url)
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(8)
            self.logger.info(f"üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.driver.page_source)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            matches = self._extract_complete_match_data(sport)
            
            self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(matches)} –ø–æ–ª–Ω—ã—Ö –º–∞—Ç—á–µ–π")
            return matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def _extract_complete_match_data(self, sport: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π"""
        
        matches = []
        
        try:
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø–æ event –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
            event_containers = self.driver.find_elements(By.CSS_SELECTOR, 
                'div[class*=\"event\"], div[class*=\"match\"], div[class*=\"game\"]')
            
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(event_containers)} event –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            
            for i, container in enumerate(event_containers):
                try:
                    match_data = self._parse_complete_match_container(container, sport, i)
                    if match_data:
                        matches.append(match_data)
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {i}: {e}")
                    continue
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∏—â–µ–º –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
            if not matches:
                matches = self._extract_from_page_text(sport)
            
            # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º
            unique_matches = self._deduplicate_complete_matches(matches)
            
            return unique_matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def _parse_complete_match_container(self, container, sport: str, index: int) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            full_text = container.text.strip()
            
            if not full_text or len(full_text) < 15:
                return None
            
            self.logger.debug(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {index}: {full_text[:150]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            match_info = self._extract_basic_match_info(full_text, sport)
            if not match_info:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            odds_data = self._extract_odds_from_container(container, full_text, sport)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏–≥—É
            league = self._extract_league_info(container, full_text)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            complete_match = {
                **match_info,
                'league': league,
                'odds': odds_data,
                'source': 'enhanced_mobile_marathonbet',
                'sport_type': sport,
                'raw_text': full_text[:200]  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            
            return complete_match
            
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return None
    
    def _extract_basic_match_info(self, text: str, sport: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ"""
        
        # –ò—â–µ–º —Å—á–µ—Ç
        score_match = re.search(r'(\\d+):(\\d+)', text)
        if not score_match:
            return None
        
        score = score_match.group(0)
        
        # –ò—â–µ–º –≤—Ä–µ–º—è
        time_match = re.search(r'(\\d{1,2}:\\d{2})', text)
        match_time = time_match.group(0) if time_match else 'LIVE'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Ä—Ç–∞
        if sport in ['tennis', 'table_tennis']:
            teams = self._extract_tennis_teams(text)
        else:
            teams = self._extract_football_teams(text)
        
        if not teams:
            return None
        
        return {
            'team1': teams[0],
            'team2': teams[1],
            'score': score,
            'time': match_time
        }
    
    def _extract_tennis_teams(self, text: str) -> Optional[List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–æ–≤"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –∏–º–µ–Ω
        patterns = [
            r'([–ê-–Ø–∞-—èA-Za-z]+,\\s*[–ê-–Ø–∞-—èA-Za-z]+).*?([–ê-–Ø–∞-—èA-Za-z]+,\\s*[–ê-–Ø–∞-—èA-Za-z]+)',
            r'([–ê-–Ø–∞-—èA-Za-z\\s,-]+?)\\s+([–ê-–Ø–∞-—èA-Za-z\\s,-]+?)\\s+\\d+:\\d+',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                team1 = self._clean_team_name(match.group(1))
                team2 = self._clean_team_name(match.group(2))
                
                if self._are_valid_teams(team1, team2):
                    return [team1, team2]
        
        return None
    
    def _extract_football_teams(self, text: str) -> Optional[List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        
        lines = text.split('\\n')
        team_candidates = []
        
        for line in lines:
            line = line.strip()
            if (line and 3 <= len(line) <= 25 and
                not re.match(r'^\\d+$', line) and
                not re.match(r'^\\d+\\.\\d+$', line) and
                not re.match(r'^\\d+:\\d+$', line) and
                line not in ['1', '2', 'X', '+', '-']):
                team_candidates.append(line)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã
        if len(team_candidates) >= 2:
            team1 = self._clean_team_name(team_candidates[0])
            team2 = self._clean_team_name(team_candidates[1])
            
            if self._are_valid_teams(team1, team2):
                return [team1, team2]
        
        return None
    
    def _extract_odds_from_container(self, container, text: str, sport: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        
        odds = {}
        
        try:
            # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            coeff_matches = re.findall(r'\\b(\\d+\\.\\d+)\\b', text)
            
            if coeff_matches:
                # –î–ª—è —Ñ—É—Ç–±–æ–ª–∞: 1, X, 2, 1X, 12, X2, —Ñ–æ—Ä–∞, —Ç–æ—Ç–∞–ª
                if sport == 'football' and len(coeff_matches) >= 6:
                    odds = {
                        '1': coeff_matches[0] if len(coeff_matches) > 0 else None,
                        'X': coeff_matches[1] if len(coeff_matches) > 1 else None,
                        '2': coeff_matches[2] if len(coeff_matches) > 2 else None,
                        '1X': coeff_matches[3] if len(coeff_matches) > 3 else None,
                        '12': coeff_matches[4] if len(coeff_matches) > 4 else None,
                        'X2': coeff_matches[5] if len(coeff_matches) > 5 else None,
                    }
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
                    if len(coeff_matches) > 6:
                        odds['handicap'] = coeff_matches[6:8]
                        odds['total'] = coeff_matches[8:10] if len(coeff_matches) > 8 else []
                
                # –î–ª—è —Ç–µ–Ω–Ω–∏—Å–∞: 1, 2, —Ñ–æ—Ä–∞, —Ç–æ—Ç–∞–ª
                elif sport in ['tennis', 'table_tennis'] and len(coeff_matches) >= 2:
                    odds = {
                        '1': coeff_matches[0],
                        '2': coeff_matches[1],
                        'handicap': coeff_matches[2:4] if len(coeff_matches) > 2 else [],
                        'total': coeff_matches[4:6] if len(coeff_matches) > 4 else []
                    }
            
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç—ã
            coeff_elements = container.find_elements(By.XPATH, './/*[text()]')
            for elem in coeff_elements:
                elem_text = elem.text.strip()
                if re.match(r'^\\d+\\.\\d+$', elem_text):
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
                    pass
            
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        
        return odds
    
    def _extract_league_info(self, container, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–≥–µ"""
        
        # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        league_patterns = [
            r'([–ê-–Ø–∞-—è]+\\.\\s*[–ê-–Ø–∞-—è\\s\\.]+)',  # –ò–Ω–¥–∏—è. –ú–∏–∑–æ—Ä–∞–º. –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞
            r'([A-Za-z]+\\.\\s*[A-Za-z\\s\\.]+)',   # English leagues
        ]
        
        for pattern in league_patterns:
            match = re.search(pattern, text)
            if match:
                league = match.group(1).strip()
                if len(league) > 5:
                    return league
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        try:
            parent = container.find_element(By.XPATH, '..')
            parent_text = parent.text
            
            for pattern in league_patterns:
                match = re.search(pattern, parent_text)
                if match:
                    return match.group(1).strip()
        except:
            pass
        
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–∏–≥–∞'
    
    def _extract_from_page_text(self, sport: str) -> List[Dict[str, Any]]:
        """Fallback: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        try:
            page_text = self.driver.find_element(By.TAG_NAME, 'body').text
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –∏ –∏—â–µ–º –º–∞—Ç—á–∏
            blocks = page_text.split('\\n\\n')
            
            matches = []
            for block in blocks:
                if len(block) > 50 and ':' in block:
                    match_info = self._extract_basic_match_info(block, sport)
                    if match_info:
                        matches.append({
                            **match_info,
                            'league': '–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
                            'odds': {},
                            'source': 'page_text_fallback'
                        })
            
            return matches
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ fallback –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return []
    
    def _clean_team_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/–∏–≥—Ä–æ–∫–∞"""
        if not name:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        name = re.sub(r'[^\\w\\s,.-]', '', name).strip()
        name = re.sub(r'\\s+', ' ', name)
        
        # –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
        name = re.sub(r'^\\d+\\s*', '', name)
        name = re.sub(r'\\s*\\d+$', '', name)
        
        return name
    
    def _are_valid_teams(self, team1: str, team2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥"""
        return (team1 and team2 and 
                len(team1) >= 3 and len(team2) >= 3 and
                team1.lower() != team2.lower())
    
    def _deduplicate_complete_matches(self, matches: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –º–∞—Ç—á–µ–π"""
        seen = set()
        unique = []
        
        for match in matches:
            key = f"{match.get('team1', '').lower()}_{match.get('team2', '').lower()}_{match.get('score', '')}"
            if key not in seen and len(key) > 10:
                seen.add(key)
                unique.append(match)
        
        return unique
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                self.logger.info("üîß Enhanced –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
            finally:
                self.driver = None


# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_enhanced_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    import logging
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    scraper = EnhancedMobileMarathonBetScraper(logger)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É—Ç–±–æ–ª
        print("\\nüèà –¢–ï–°–¢–ò–†–£–ï–ú –§–£–¢–ë–û–õ:")
        football_matches = scraper.get_complete_matches_data('football')
        
        for i, match in enumerate(football_matches[:3], 1):
            print(f"\\n  –ú–∞—Ç—á {i}:")
            print(f"    {match.get('team1')} vs {match.get('team2')}")
            print(f"    –°—á–µ—Ç: {match.get('score')} | –í—Ä–µ–º—è: {match.get('time')}")
            print(f"    –õ–∏–≥–∞: {match.get('league')}")
            print(f"    –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {match.get('odds', {})}")
        
        if football_matches:
            print(f"\\n‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(football_matches)} –ø–æ–ª–Ω—ã—Ö –º–∞—Ç—á–µ–π!")
        else:
            print("\\n‚ùå –ü–æ–ª–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    finally:
        scraper.close()


if __name__ == "__main__":
    test_enhanced_scraper()