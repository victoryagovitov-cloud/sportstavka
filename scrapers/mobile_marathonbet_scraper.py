"""
–ü–∞—Ä—Å–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ MarathonBet —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç–∞ live –º–∞—Ç—á–µ–π
"""

import logging
import re
import time
from typing import List, Dict, Any, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class MobileMarathonBetScraper:
    """
    –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ê–ù–î!
    
    –ü–∞—Ä—Å–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ MarathonBet –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç:
    - –¢–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    - –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç–∞
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–∞—Ö –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫)
    - –†–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ –≤–º–µ—Å—Ç–æ LIVE
    - –¢–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        # URLs –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
        self.mobile_urls = {
            'football': 'https://mobile.marathonbet.ru/su/sport/live/26418',
            'tennis': 'https://mobile.marathonbet.ru/su/sport/live/22723', 
            'table_tennis': 'https://mobile.marathonbet.ru/su/sport/live/414329',
            'handball': 'https://mobile.marathonbet.ru/su/sport/live/26422'
        }
        
        self.driver = None
        
    def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        
        if self.driver:
            return
            
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=375,812')  # iPhone —Ä–∞–∑–º–µ—Ä
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1')
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.logger.info("‚úÖ Selenium Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selenium: {e}")
            raise
    
    def get_live_matches_with_real_scores(self, sport: str = 'football') -> List[Dict[str, Any]]:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç live –º–∞—Ç—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏
        
        Args:
            sport: –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ ('football', 'tennis', 'table_tennis', 'handball')
            
        Returns:
            List[Dict]: –ú–∞—Ç—á–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏
        """
        
        if sport not in self.mobile_urls:
            self.logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}")
            return []
            
        url = self.mobile_urls[sport]
        self.logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º {sport} –º–∞—Ç—á–∏ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {url}")
        
        try:
            self._setup_driver()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)
            self.logger.info("üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            page_source_size = len(self.driver.page_source)
            self.logger.info(f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ JS: {page_source_size} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç—á–∏
            matches = self._extract_matches_from_mobile_page(sport)
            
            self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
            return matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π: {e}")
            return []
    
    def _extract_matches_from_mobile_page(self, sport: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç—á–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–±–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        matches = []
        
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–∞—Ç—á–∞–º–∏
            event_elements = self.driver.find_elements(By.CSS_SELECTOR, 'div[class*="event"]')
            
            if not event_elements:
                self.logger.warning("‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(event_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
            for i, element in enumerate(event_elements):
                try:
                    match_data = self._parse_match_element(element, sport, i)
                    if match_data:
                        matches.append(match_data)
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                    continue
            
            # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –º–∞—Ç—á–∏
            unique_matches = self._deduplicate_matches(matches)
            
            self.logger.info(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(unique_matches)}")
            return unique_matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π: {e}")
            return []
    
    def _parse_match_element(self, element, sport: str, index: int) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ç—á–∞"""
        
        try:
            element_text = element.text.strip()
            
            if not element_text or len(element_text) < 10:
                return None
            
            self.logger.debug(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç {index}: {element_text[:100]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Ä—Ç–∞
            if sport == 'tennis' or sport == 'table_tennis':
                return self._parse_tennis_match(element_text, sport)
            elif sport == 'football':
                return self._parse_football_match(element_text)
            elif sport == 'handball':
                return self._parse_handball_match(element_text)
            else:
                return self._parse_generic_match(element_text, sport)
                
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def _parse_tennis_match(self, text: str, sport: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –º–∞—Ç—á"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞: "–ò–≥—Ä–æ–∫1 –ò–≥—Ä–æ–∫2 —Å—á–µ—Ç_–ø–æ_—Å–µ—Ç–∞–º (—Å—á–µ—Ç_—Ç–µ–∫—É—â–µ–≥–æ_—Å–µ—Ç–∞)"
        patterns = [
            r'([–ê-–Ø–∞-—èA-Za-z\s,-]+?)\s+([–ê-–Ø–∞-—èA-Za-z\s,-]+?)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+).*?\((\d+):(\d+)\)',
            r'([–ê-–Ø–∞-—èA-Za-z\s,-]+?)\s+([–ê-–Ø–∞-—èA-Za-z\s,-]+?).*?\((\d+):(\d+),(\d+):(\d+)\)',
            r'([–ê-–Ø–∞-—èA-Za-z\s,-]+?)\s+([–ê-–Ø–∞-—èA-Za-z\s,-]+?).*?\((\d+):(\d+)\)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
            if match:
                groups = match.groups()
                
                if len(groups) >= 4:
                    team1 = self._clean_team_name(groups[0])
                    team2 = self._clean_team_name(groups[1])
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç (–ø–æ —Å–µ—Ç–∞–º)
                    if len(groups) >= 6 and 'set' not in text.lower():
                        # –§–æ—Ä–º–∞—Ç: —Å–µ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
                        sets_home = groups[2]
                        sets_away = groups[3] 
                        score = f"{sets_home}:{sets_away}"
                    else:
                        # –§–æ—Ä–º–∞—Ç: —Å—á–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
                        score_home = groups[-2]
                        score_away = groups[-1]
                        score = f"{score_home}:{score_away}"
                    
                    if self._is_valid_match(team1, team2, score):
                        return {
                            'team1': team1,
                            'team2': team2,
                            'score': score,
                            'sport': sport,
                            'source': 'mobile_marathonbet_selenium'
                        }
        
        return None
    
    def _parse_football_match(self, text: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á"""
        
        patterns = [
            r'([–ê-–Ø–∞-—èA-Za-z\s]+?)\s+([–ê-–Ø–∞-—èA-Za-z\s]+?)\s+(\d+)\s+(\d+)',
            r'(\d+)\s+([–ê-–Ø–∞-—èA-Za-z\s]+?)\s+(\d+)\s+([–ê-–Ø–∞-—èA-Za-z\s]+?)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                groups = match.groups()
                
                if len(groups) >= 4:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ –∫–æ–º–∞–Ω–¥—ã, –∞ –≥–¥–µ —Å—á–µ—Ç
                    if groups[0].isdigit():
                        # –§–æ—Ä–º–∞—Ç: —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–∞ —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–∞
                        score = f"{groups[0]}:{groups[2]}"
                        team1 = self._clean_team_name(groups[1])
                        team2 = self._clean_team_name(groups[3])
                    else:
                        # –§–æ—Ä–º–∞—Ç: –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—á–µ—Ç —Å—á–µ—Ç
                        team1 = self._clean_team_name(groups[0])
                        team2 = self._clean_team_name(groups[1])
                        score = f"{groups[2]}:{groups[3]}"
                    
                    if self._is_valid_match(team1, team2, score):
                        return {
                            'team1': team1,
                            'team2': team2,
                            'score': score,
                            'sport': 'football',
                            'source': 'mobile_marathonbet_selenium'
                        }
        
        return None
    
    def _parse_handball_match(self, text: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –≥–∞–Ω–¥–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á"""
        return self._parse_football_match(text)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    
    def _parse_generic_match(self, text: str, sport: str) -> Optional[Dict[str, Any]]:
        """–û–±—â–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ —Å–ø–æ—Ä—Ç–∞"""
        
        # –ò—â–µ–º –ª—é–±—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥ –∏ —Å—á–µ—Ç–æ–≤
        patterns = [
            r'([–ê-–Ø–∞-—èA-Za-z\s,-]+?)\s+([–ê-–Ø–∞-—èA-Za-z\s,-]+?).*?(\d+)[:-](\d+)',
            r'(\d+)[:-](\d+).*?([–ê-–Ø–∞-—èA-Za-z\s,-]+?)\s+([–ê-–Ø–∞-—èA-Za-z\s,-]+?)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                groups = match.groups()
                
                if len(groups) >= 4:
                    if groups[0].isdigit():
                        score = f"{groups[0]}:{groups[1]}"
                        team1 = self._clean_team_name(groups[2])
                        team2 = self._clean_team_name(groups[3])
                    else:
                        team1 = self._clean_team_name(groups[0])
                        team2 = self._clean_team_name(groups[1])
                        score = f"{groups[2]}:{groups[3]}"
                    
                    if self._is_valid_match(team1, team2, score):
                        return {
                            'team1': team1,
                            'team2': team2,
                            'score': score,
                            'sport': sport,
                            'source': 'mobile_marathonbet_selenium'
                        }
        
        return None
    
    def _clean_team_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        
        if not name:
            return ""
            
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        name = re.sub(r'[^\w\s,-]', '', name).strip()
        name = re.sub(r'\s+', ' ', name)
        
        # –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
        name = re.sub(r'^\d+\s*', '', name)
        name = re.sub(r'\s*\d+$', '', name)
        
        return name
    
    def _is_valid_match(self, team1: str, team2: str, score: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞"""
        
        if not team1 or not team2 or not score:
            return False
            
        if len(team1) < 3 or len(team2) < 3:
            return False
            
        if team1.lower() == team2.lower():
            return False
            
        if ':' not in score:
            return False
            
        try:
            home, away = map(int, score.split(':'))
            if home < 0 or away < 0 or home > 50 or away > 50:
                return False
        except ValueError:
            return False
            
        return True
    
    def _deduplicate_matches(self, matches: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –º–∞—Ç—á–µ–π"""
        
        seen = set()
        unique = []
        
        for match in matches:
            key = f"{match['team1'].lower()}_{match['team2'].lower()}_{match['score']}"
            if key not in seen:
                seen.add(key)
                unique.append(match)
        
        return unique
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                self.logger.info("üîß Selenium –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            finally:
                self.driver = None
    
    def __del__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_mobile_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    import logging
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    scraper = MobileMarathonBetScraper(logger)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
        sports = ['tennis', 'football', 'table_tennis']
        
        for sport in sports:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {sport}:")
            matches = scraper.get_live_matches_with_real_scores(sport)
            
            print(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
            
            for i, match in enumerate(matches[:3], 1):
                print(f"  {i}. {match['team1']} vs {match['team2']}: {match['score']}")
                
    finally:
        scraper.close()


if __name__ == "__main__":
    test_mobile_scraper()