#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ—É—Ç–±–æ–ª–∞: –∫–æ–º–∞–Ω–¥—ã + —Å—á–µ—Ç + –≤—Ä–µ–º—è + –ª–∏–≥–∞
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import re
from datetime import datetime

print('üìä –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –§–£–¢–ë–û–õ–ê –° –õ–ò–ì–ê–ú–ò')
print('=' * 50)

chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')
chrome_options.add_argument('--window-size=1920,1080')
chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')

url = 'https://www.marathonbet.ru/su/live/26418'

current_time = datetime.now().strftime('%H:%M:%S')
print(f'\nüïê –í–†–ï–ú–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø: {current_time}')

try:
    driver = webdriver.Chrome(options=chrome_options)
    driver.get(url)
    time.sleep(6)
    
    print('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    tables = driver.find_elements(By.TAG_NAME, 'table')
    print(f'üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}')
    
    all_matches = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for table_idx, table in enumerate(tables):
        try:
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–∏–≥–∏ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            table_league = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–∏–≥–∞'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
            try:
                # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ h1-h6 –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
                headings = driver.find_elements(By.CSS_SELECTOR, 'h1, h2, h3, h4, h5, h6')
                for heading in headings:
                    heading_text = heading.text.strip()
                    if (heading_text and len(heading_text) > 5 and
                        any(word in heading_text.lower() for word in ['–ª–∏–≥–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–∫—É–±–æ–∫', '—Ç—É—Ä–Ω–∏—Ä', '–ø—Ä–µ–º—å–µ—Ä', '–¥–∏–≤–∏–∑–∏–æ–Ω', 'acl', '5x5', '3x3'])):
                        table_league = heading_text
                        break
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ div —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                if table_league == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–∏–≥–∞':
                    divs = driver.find_elements(By.CSS_SELECTOR, 'div')
                    for div in divs:
                        div_text = div.text.strip()
                        if (div_text and len(div_text) > 10 and len(div_text) < 100 and
                            any(word in div_text.lower() for word in ['–ª–∏–≥–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–∫—É–±–æ–∫', '—Ç—É—Ä–Ω–∏—Ä', '–ø—Ä–µ–º—å–µ—Ä', '–¥–∏–≤–∏–∑–∏–æ–Ω', 'acl', '5x5', '3x3', '–∏–Ω–¥–∏—è', '–∫–∏—Ç–∞–π', '—Ä–æ—Å—Å–∏—è'])):
                            table_league = div_text
                            break
                            
            except:
                pass
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = table.find_elements(By.TAG_NAME, 'tr')
            
            for row_idx, row in enumerate(rows):
                try:
                    cells = row.find_elements(By.TAG_NAME, 'td')
                    
                    if len(cells) >= 3:
                        main_cell = cells[0].text.strip()
                        
                        if main_cell and len(main_cell) > 10:
                            # –ò—â–µ–º —Å—á–µ—Ç
                            score_match = re.search(r'(\d+):(\d+)', main_cell)
                            
                            if score_match:
                                score = score_match.group(0)
                                
                                # –ò—â–µ–º –≤—Ä–µ–º—è
                                time_match = re.search(r'(\d{1,2}:\d{2})', main_cell)
                                match_time = time_match.group(0) if time_match else 'LIVE'
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                                lines = main_cell.split('\n')
                                teams = []
                                
                                for line in lines:
                                    line = line.strip()
                                    
                                    if (line and 
                                        re.search(r'[–ê-–Ø–∞-—èA-Za-z]', line) and
                                        not re.match(r'^\d+$', line) and
                                        not re.match(r'^\d+\.\d+$', line) and
                                        not re.match(r'^\d+:\d+$', line) and
                                        line not in ['1.', '2.', '+', '-', 'X'] and
                                        len(line) >= 3):
                                        
                                        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                                        clean_name = re.sub(r'^\d+\.\s*', '', line).strip()
                                        if clean_name and len(clean_name) >= 3:
                                            teams.append(clean_name)
                                
                                if len(teams) >= 2:
                                    match_info = {
                                        'team1': teams[0],
                                        'team2': teams[1],
                                        'score': score,
                                        'time': match_time,
                                        'league': table_league,
                                        'table': table_idx
                                    }
                                    all_matches.append(match_info)
                                    
                except Exception:
                    continue
                    
        except Exception:
            continue
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_matches = []
    seen = set()
    
    for match in all_matches:
        key = f"{match['team1'].lower()}_{match['team2'].lower()}_{match['score']}"
        if key not in seen:
            seen.add(key)
            unique_matches.append(match)
    
    print(f'\n‚öΩ –í–°–ï –ê–ö–¢–£–ê–õ–¨–ù–´–ï –§–£–¢–ë–û–õ–¨–ù–´–ï –ú–ê–¢–ß–ò:')
    print('=' * 40)
    
    if unique_matches:
        non_draw_count = 0
        
        for i, match in enumerate(unique_matches, 1):
            team1 = match['team1']
            team2 = match['team2']
            score = match['score']
            time = match['time']
            league = match['league']
            
            print(f'\n{i}. {team1} vs {team2}')
            print(f'   –°—á–µ—Ç: {score} | –í—Ä–µ–º—è: {time}')
            print(f'   –õ–∏–≥–∞: {league}')
            
            # –ê–Ω–∞–ª–∏–∑
            try:
                home, away = map(int, score.split(':'))
                if home == away:
                    print(f'   –°—Ç–∞—Ç—É—Å: ‚öñÔ∏è –ù–∏—á–µ–π–Ω—ã–π')
                else:
                    leader = '—Ö–æ–∑—è–µ–≤–∞' if home > away else '–≥–æ—Å—Ç–∏'
                    diff = abs(home - away)
                    print(f'   –°—Ç–∞—Ç—É—Å: ‚úÖ –ù–µ–Ω–∏—á–µ–π–Ω—ã–π (–≤–µ–¥—É—Ç {leader} +{diff})')
                    non_draw_count += 1
            except:
                print(f'   –°—Ç–∞—Ç—É—Å: ‚ùì –û—à–∏–±–∫–∞')
        
        print(f'\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        print('-' * 25)
        print(f'   –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(unique_matches)}')
        print(f'   –ù–µ–Ω–∏—á–µ–π–Ω—ã—Ö: {non_draw_count}')
        print(f'   –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è Claude AI: {non_draw_count}')
        
        if non_draw_count > 0:
            print(f'\nüéâ –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ê!')
            print(f'‚úÖ –ö–æ–º–∞–Ω–¥—ã + —Å—á–µ—Ç–∞ + –≤—Ä–µ–º—è + –ª–∏–≥–∏')
            print(f'üöÄ –ì–û–¢–û–í–û –ö –ê–ù–ê–õ–ò–ó–£ CLAUDE AI!')
    
    else:
        print(f'\n‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')

finally:
    try:
        driver.quit()
    except:
        pass