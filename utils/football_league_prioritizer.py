"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –ª–∏–≥
–ò—Å–∫–ª—é—á–∞–µ—Ç –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª, –ø–æ–Ω–∏–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ACL –∏ 5x5
"""

import re
import logging
from typing import List, Dict, Any
from enum import Enum


class LeaguePriority(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ª–∏–≥"""
    HIGHEST = 1      # –¢–æ–ø-–ª–∏–≥–∏ (–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞, –ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞)
    HIGH = 2         # –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–≥–∏
    MEDIUM = 3       # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–≥–∏
    LOW = 4          # –ú–æ–ª–æ–¥–µ–∂–Ω—ã–µ –ª–∏–≥–∏
    VERY_LOW = 5     # ACL, 5x5 - —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    EXCLUDED = 999   # –ö–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–µ–Ω


class FootballLeaguePrioritizer:
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –ª–∏–≥ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
    
    –ò–°–ö–õ–Æ–ß–ê–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ:
    - –ö–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª (FIFA, eSports)
    
    –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):
    - ACL –ª–∏–≥–∏
    - 5x5 —Ç—É—Ä–Ω–∏—Ä—ã
    
    –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–ø–µ—Ä–≤—ã–µ):
    - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–±–æ—Ä–Ω—ã–µ
    - –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∏
    - –ß–µ–º–ø–∏–æ–Ω–∞—Ç—ã –º–∏—Ä–∞/–ï–≤—Ä–æ–ø—ã
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        # –ò–°–ö–õ–Æ–ß–ê–ï–ú–´–ï –õ–ò–ì–ò (–∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª)
        self.excluded_patterns = [
            r'\b(–∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª|cyber|fifa|esports|e-sports)\b',
            r'\b(bomb1to|arcos|wboy|kraftvk|lowheels)\b',  # –ù–∏–∫–Ω–µ–π–º—ã –∏–≥—Ä–æ–∫–æ–≤
            r'\b(guardian|lava|kalibrikon|lx7ss)\b',
        ]
        
        # –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (ACL, 5x5)
        self.very_low_priority_patterns = [
            r'\b(acl|5x5|5—Ö5|3x3|3—Ö3)\b',
            r'\b(–∫—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä)\b'
        ]
        
        # –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–º–æ–ª–æ–¥–µ–∂—å)
        self.low_priority_patterns = [
            r'\b(–¥–æ \d+|under \d+|u\d+)\b',
            r'\b(–º–æ–ª–æ–¥–µ–∂—å|—é–Ω–∏–æ—Ä|junior)\b'
        ]
        
        # –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
        self.medium_priority_patterns = [
            r'\b(–¥–∏–≤–∏–∑–∏–æ–Ω|division|—Å–µ—Ä–∏—è|serie)\b',
            r'\b(—Ä–µ–≥–∏–æ–Ω–∞–ª—å|local|–æ–±–ª–∞—Å—Ç–Ω)\b'
        ]
        
        # –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–≥–∏)
        self.high_priority_patterns = [
            r'\b(–ø—Ä–µ–º—å–µ—Ä|premier|–ª–∏–≥–∞|liga|—á–µ–º–ø–∏–æ–Ω–∞—Ç|championship)\b',
            r'\b(–±—É–Ω–¥–µ—Å–ª–∏–≥–∞|–ª–∞ –ª–∏–≥–∞|—Å–µ—Ä–∏—è –∞|–ª–∏–≥–∞ 1)\b'
        ]
        
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ (—Ç–æ–ø-—Ç—É—Ä–Ω–∏—Ä—ã)
        self.highest_priority_patterns = [
            r'\b(—á–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞|world cup|–µ–≤—Ä–æ|euro|–∫—É–±–æ–∫|cup)\b',
            r'\b(–ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤|champions league|uefa)\b',
            r'\b(–æ—Ç–±–æ—Ä–æ—á–Ω—ã–µ|qualifier|playoff)\b'
        ]
    
    def get_league_priority(self, league_name: str) -> LeaguePriority:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–∏–≥–∏
        
        Args:
            league_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
            
        Returns:
            LeaguePriority: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        """
        
        if not league_name:
            return LeaguePriority.MEDIUM
        
        league_lower = league_name.lower()
        
        # –ò–°–ö–õ–Æ–ß–ê–ï–ú –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª
        for pattern in self.excluded_patterns:
            if re.search(pattern, league_lower, re.IGNORECASE):
                self.logger.info(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª: {league_name}")
                return LeaguePriority.EXCLUDED
        
        # –û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (ACL, 5x5)
        for pattern in self.very_low_priority_patterns:
            if re.search(pattern, league_lower, re.IGNORECASE):
                self.logger.debug(f"‚¨áÔ∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {league_name}")
                return LeaguePriority.VERY_LOW
        
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        for pattern in self.highest_priority_patterns:
            if re.search(pattern, league_lower, re.IGNORECASE):
                self.logger.debug(f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {league_name}")
                return LeaguePriority.HIGHEST
        
        # –í–´–°–û–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        for pattern in self.high_priority_patterns:
            if re.search(pattern, league_lower, re.IGNORECASE):
                self.logger.debug(f"‚¨ÜÔ∏è –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {league_name}")
                return LeaguePriority.HIGH
        
        # –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–º–æ–ª–æ–¥–µ–∂—å)
        for pattern in self.low_priority_patterns:
            if re.search(pattern, league_lower, re.IGNORECASE):
                self.logger.debug(f"‚¨áÔ∏è –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {league_name}")
                return LeaguePriority.LOW
        
        # –°–†–ï–î–ù–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
        for pattern in self.medium_priority_patterns:
            if re.search(pattern, league_lower, re.IGNORECASE):
                self.logger.debug(f"‚û°Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {league_name}")
                return LeaguePriority.MEDIUM
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        return LeaguePriority.MEDIUM
    
    def prioritize_football_matches(self, matches: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –ø–æ –ª–∏–≥–∞–º
        
        Args:
            matches: –°–ø–∏—Å–æ–∫ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
            
        Returns:
            List[Dict]: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–µ)
        """
        
        if not matches:
            return []
        
        prioritized_matches = []
        excluded_count = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∂–¥–æ–º—É –º–∞—Ç—á—É
        for match in matches:
            league = match.get('league', match.get('tournament', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–∏–≥–∞'))
            priority = self.get_league_priority(league)
            
            if priority == LeaguePriority.EXCLUDED:
                excluded_count += 1
                continue  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª
            
            match_copy = match.copy()
            match_copy['league_priority'] = priority.value
            match_copy['league_priority_name'] = priority.name
            prioritized_matches.append(match_copy)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        prioritized_matches.sort(key=lambda m: m['league_priority'])
        
        self.logger.info(f"‚öΩ –§—É—Ç–±–æ–ª—å–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è:")
        self.logger.info(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(matches)}")
        self.logger.info(f"   –ò—Å–∫–ª—é—á–µ–Ω–æ –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª–∞: {excluded_count}")
        self.logger.info(f"   –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(prioritized_matches)}")
        
        return prioritized_matches
    
    def get_priority_statistics(self, prioritized_matches: List[Dict[str, Any]]) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        
        stats = {}
        
        for match in prioritized_matches:
            priority_name = match.get('league_priority_name', 'UNKNOWN')
            stats[priority_name] = stats.get(priority_name, 0) + 1
        
        return stats
    
    def filter_top_priority_matches(self, prioritized_matches: List[Dict[str, Any]], max_matches: int = 10) -> List[Dict[str, Any]]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ø –º–∞—Ç—á–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        
        Args:
            prioritized_matches: –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
            max_matches: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
            
        Returns:
            List[Dict]: –¢–æ–ø –º–∞—Ç—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        
        if len(prioritized_matches) <= max_matches:
            return prioritized_matches
        
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–µ –º–∞—Ç—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        top_matches = prioritized_matches[:max_matches]
        
        self.logger.info(f"üéØ –û—Ç–æ–±—Ä–∞–Ω–æ {len(top_matches)} —Ç–æ–ø —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏–∑ {len(prioritized_matches)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö
        selected_stats = self.get_priority_statistics(top_matches)
        for priority, count in selected_stats.items():
            self.logger.info(f"   {priority}: {count} –º–∞—Ç—á–µ–π")
        
        return top_matches


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_football_prioritizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –ª–∏–≥"""
    
    import logging
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    prioritizer = FootballLeaguePrioritizer(logger)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
    test_matches = [
        {'team1': '–†–µ–∞–ª', 'team2': '–ë–∞—Ä—Å–∞', 'league': '–ò—Å–ø–∞–Ω–∏—è. –õ–∞ –õ–∏–≥–∞', 'score': '1:0'},
        {'team1': '–ö–æ–º–∞–Ω–¥–∞ –ê', 'team2': '–ö–æ–º–∞–Ω–¥–∞ –ë', 'league': '5x5. ACL. –ö—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä', 'score': '2:1'},
        {'team1': '–†–µ–∞–ª (Bomb1to)', 'team2': '–ë–∞—Ä—Å–∞ (Arcos)', 'league': '–ö–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª. FIFA', 'score': '1:2'},
        {'team1': '–ë—Ä–∞–∑–∏–ª–∏—è –¥–æ 23', 'team2': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ –¥–æ 23', 'league': '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞. –û—Ç–±–æ—Ä–æ—á–Ω—ã–µ', 'score': '0:1'},
        {'team1': '–õ–æ–∫–∞–ª—å–Ω–∞—è –ê', 'team2': '–õ–æ–∫–∞–ª—å–Ω–∞—è –ë', 'league': '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–≤–∏–∑–∏–æ–Ω', 'score': '1:1'},
    ]
    
    print("\\nüß™ –¢–ï–°–¢ –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò:")
    print("="*30)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º
    prioritized = prioritizer.prioritize_football_matches(test_matches)
    
    print(f"\\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏:")
    for i, match in enumerate(prioritized, 1):
        priority = match['league_priority_name']
        print(f"  {i}. {match['team1']} vs {match['team2']}")
        print(f"     –õ–∏–≥–∞: {match['league']}")
        print(f"     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = prioritizer.get_priority_statistics(prioritized)
    print(f"\\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:")
    for priority, count in stats.items():
        print(f"  {priority}: {count} –º–∞—Ç—á–µ–π")


if __name__ == "__main__":
    test_football_prioritizer()