#!/usr/bin/env python3
"""
–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã scores24.live
"""
import sys
sys.path.append('.')

import requests
import re
import json
from bs4 import BeautifulSoup

def inspect_scores24():
    print('üîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ scores24.live')
    print('='*60)
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.7339.80 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive'
    }
    
    url = 'https://scores24.live/ru/soccer?matchesFilter=live'
    
    try:
        print(f'üì° –ó–∞–≥—Ä—É–∂–∞–µ–º: {url}')
        response = requests.get(url, headers=headers, timeout=15)
        
        print(f'–°—Ç–∞—Ç—É—Å: {response.status_code}')
        print(f'–†–∞–∑–º–µ—Ä: {len(response.text):,} —Å–∏–º–≤–æ–ª–æ–≤')
        
        if response.status_code == 200:
            html = response.text
            
            # –ü–∞—Ä—Å–∏–º —Å BeautifulSoup
            soup = BeautifulSoup(html, 'html.parser')
            
            print('\\nüîç –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö –≤ HTML...')
            
            # –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            scripts = soup.find_all('script')
            print(f'–ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}')
            
            for i, script in enumerate(scripts):
                if script.string:
                    script_text = script.string
                    
                    # –ò—â–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç—á–µ–π
                    json_patterns = [
                        r'window\.__INITIAL_STATE__\s*=\s*({.+?});',
                        r'window\.__PRELOADED_STATE__\s*=\s*({.+?});',
                        r'window\.__DATA__\s*=\s*({.+?});',
                        r'"matches"\s*:\s*(\[.+?\])',
                        r'"fixtures"\s*:\s*(\[.+?\])',
                        r'"events"\s*:\s*(\[.+?\])'
                    ]
                    
                    for pattern in json_patterns:
                        matches = re.findall(pattern, script_text, re.DOTALL)
                        if matches:
                            print(f'\\n‚úÖ –ù–∞–π–¥–µ–Ω JSON –≤ —Å–∫—Ä–∏–ø—Ç–µ {i+1}:')
                            print(f'–ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}')
                            print(f'–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(matches[0]):,} —Å–∏–º–≤–æ–ª–æ–≤')
                            
                            try:
                                # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
                                data = json.loads(matches[0])
                                print(f'‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω!')
                                
                                if isinstance(data, dict):
                                    print(f'–ö–ª—é—á–∏: {list(data.keys())[:10]}')
                                    
                                    # –ò—â–µ–º –º–∞—Ç—á–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                                    def find_matches(obj, path=''):
                                        if isinstance(obj, dict):
                                            for key, value in obj.items():
                                                new_path = f'{path}.{key}' if path else key
                                                if key.lower() in ['matches', 'fixtures', 'events', 'games']:
                                                    if isinstance(value, list) and value:
                                                        print(f'üéØ –ù–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ –≤: {new_path}')
                                                        print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(value)}')
                                                        if value:
                                                            print(f'–ü—Ä–∏–º–µ—Ä: {value[0] if isinstance(value[0], dict) else str(value[0])[:100]}')
                                                        return value
                                                elif isinstance(value, (dict, list)):
                                                    result = find_matches(value, new_path)
                                                    if result:
                                                        return result
                                        elif isinstance(obj, list):
                                            for i, item in enumerate(obj[:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5
                                                result = find_matches(item, f'{path}[{i}]')
                                                if result:
                                                    return result
                                        return None
                                    
                                    matches_data = find_matches(data)
                                    if matches_data:
                                        return matches_data
                                        
                                elif isinstance(data, list) and data:
                                    print(f'–ú–∞—Å—Å–∏–≤ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
                                    if data:
                                        print(f'–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {data[0] if isinstance(data[0], dict) else str(data[0])[:100]}')
                                        return data
                                        
                            except json.JSONDecodeError as e:
                                print(f'‚ùå JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {e}')
                                print(f'–ù–∞—á–∞–ª–æ: {matches[0][:200]}...')
            
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
            print('\\nüîç –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
            
            # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints
            api_urls = re.findall(r'["\'](?:https?://[^"\s]+/)?(?:api|dapi)/[^"\s]+["\']', html)
            if api_urls:
                print(f'–ù–∞–π–¥–µ–Ω–æ API URLs: {len(set(api_urls))}')
                for api_url in list(set(api_urls))[:5]:
                    clean_url = api_url.strip('\"\\\'')
                    print(f'  ‚Ä¢ {clean_url}')
            
            # –ò—â–µ–º data –∞—Ç—Ä–∏–±—É—Ç—ã
            data_attrs = re.findall(r'data-[\w-]+=["\'][^"\']+["\']', html)
            unique_attrs = list(set([attr.split('=')[0] for attr in data_attrs]))
            print(f'\\nData –∞—Ç—Ä–∏–±—É—Ç—ã: {len(unique_attrs)}')
            for attr in unique_attrs[:10]:
                print(f'  ‚Ä¢ {attr}')
            
            return None
            
    except Exception as e:
        print(f'‚ùå –û–®–ò–ë–ö–ê: {e}')
        return None

if __name__ == '__main__':
    matches = inspect_scores24()
    if matches:
        print(f'\\n‚úÖ –ù–ê–ô–î–ï–ù–´ –î–ê–ù–ù–´–ï –ú–ê–¢–ß–ï–ô: {len(matches)}')
    else:
        print('\\n‚ùå –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON')
        print('–°–∞–π—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏')