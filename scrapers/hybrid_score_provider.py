"""
–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—á–µ—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç MarathonBet (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã) + SofaScore (—Ä–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞)
"""

import requests
import re
import logging
from typing import List, Dict, Any, Optional
from bs4 import BeautifulSoup
from scrapers.smart_team_matcher import SmartTeamMatcher


class HybridScoreProvider:
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ live –º–∞—Ç—á–µ–π
    
    –§–ò–õ–û–°–û–§–ò–Ø:
    - MarathonBet: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥—ã, –≤—Ä–µ–º—è
    - SofaScore: —Ä–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ live –º–∞—Ç—á–µ–π
    - –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–Ω–∏—á–µ–π–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å—á–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self.score_sources = [
            {
                'name': 'SofaScore',
                'url': 'https://www.sofascore.com/football/livescore',
                'patterns': [r'\b(\d+)\s*-\s*(\d+)\b', r'\b(\d+):(\d+)\b']
            },
            {
                'name': 'FlashScore',
                'url': 'https://www.flashscore.com/football/',
                'patterns': [r'\b(\d+)\s*-\s*(\d+)\b', r'\b(\d+):(\d+)\b']
            },
            {
                'name': 'Scores24',
                'url': 'https://scores24.live/ru/soccer?matchesFilter=live',
                'patterns': [r'\b(\d+)\s*-\s*(\d+)\b', r'\b(\d+):(\d+)\b']
            }
        ]
        
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3'
        }
        
        # –ö—ç—à —Å—á–µ—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._scores_cache = {}
        
        # –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        self.smart_matcher = SmartTeamMatcher(logger)
        
    def get_live_scores_from_best_source(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ live —Å—á–µ—Ç–∞ –∏–∑ –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å {–∫–æ–º–∞–Ω–¥—ã: —Å—á–µ—Ç}
        """
        
        for source in self.score_sources:
            try:
                self.logger.info(f"–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç–∞ –∏–∑ {source['name']}")
                
                response = requests.get(source['url'], headers=self.headers, timeout=10)
                
                if response.status_code == 200:
                    html_content = response.text
                    scores = self._extract_scores_from_html(html_content, source['patterns'])
                    
                    if scores:
                        self.logger.info(f"‚úÖ {source['name']}: –Ω–∞–π–¥–µ–Ω–æ {len(scores)} —Å—á–µ—Ç–æ–≤")
                        self._scores_cache = scores
                        return scores
                    else:
                        self.logger.warning(f"‚ùå {source['name']}: —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    self.logger.warning(f"‚ùå {source['name']}: HTTP {response.status_code}")
                    
            except Exception as e:
                self.logger.error(f"‚ùå {source['name']}: –æ—à–∏–±–∫–∞ {e}")
                continue
        
        self.logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—á–µ—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return {}
    
    def _extract_scores_from_html(self, html_content: str, patterns: List[str]) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—á–µ—Ç–∞ –∏–∑ HTML –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        
        Args:
            html_content: HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            patterns: –°–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å {—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–∫–ª—é—á: —Å—á–µ—Ç}
        """
        
        all_scores = set()
        
        for pattern in patterns:
            matches = re.findall(pattern, html_content)
            for match in matches:
                if len(match) == 2:
                    try:
                        home, away = int(match[0]), int(match[1])
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞
                        if 0 <= home <= 15 and 0 <= away <= 15:
                            score = f"{home}:{away}"
                            all_scores.add(score)
                    except ValueError:
                        continue
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        scores_dict = {}
        for i, score in enumerate(sorted(all_scores)):
            scores_dict[f"match_{i}"] = score
            
        return scores_dict
    
    def enrich_marathonbet_matches_with_real_scores(self, marathonbet_matches: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ë–ï–ó–û–ü–ê–°–ù–´–ô –ú–ï–¢–û–î: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—é –º–∞—Ç—á–µ–π
        
        –§–ò–õ–û–°–û–§–ò–Ø: –õ—É—á—à–µ –º–µ–Ω—å—à–µ –º–∞—Ç—á–µ–π, –Ω–æ —Ç–æ—á–Ω—ã—Ö!
        
        Args:
            marathonbet_matches: –ú–∞—Ç—á–∏ –æ—Ç MarathonBet —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –Ω–æ LIVE —Å—á–µ—Ç–∞–º–∏
            
        Returns:
            List[Dict[str, Any]]: –¢–æ–ª—å–∫–æ –º–∞—Ç—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏
        """
        
        self.logger.info("üõ°Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        try:
            sofascore_matches = self.smart_matcher.get_sofascore_matches_with_teams()
            
            if sofascore_matches:
                self.logger.info(f"‚úÖ SofaScore: –ø–æ–ª—É—á–µ–Ω–æ {len(sofascore_matches)} –º–∞—Ç—á–µ–π")
                
                matched_matches = self.smart_matcher.match_marathonbet_with_sofascore(
                    marathonbet_matches, sofascore_matches
                )
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                high_confidence_matches = []
                for match in matched_matches:
                    confidence = match.get('match_confidence', 0)
                    if confidence >= 0.7:  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        high_confidence_matches.append(match)
                
                if high_confidence_matches:
                    self.logger.info(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ {len(high_confidence_matches)} –º–∞—Ç—á–µ–π —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
                    return high_confidence_matches
                else:
                    self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
            else:
                self.logger.warning("‚ùå SofaScore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        
        # –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô FALLBACK: —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –æ—Ç MarathonBet
        self.logger.info("üõ°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        
        real_score_matches = []
        for match in marathonbet_matches:
            score = match.get('score', 'LIVE')
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ (–Ω–µ LIVE) —Å—á–µ—Ç–∞–º–∏
            if score != 'LIVE' and ':' in score and score != '0:0':
                try:
                    home, away = map(int, score.split(':'))
                    if 0 <= home <= 10 and 0 <= away <= 10:  # –†–∞–∑—É–º–Ω—ã–µ —Å—á–µ—Ç–∞
                        match['score_source'] = 'marathonbet_verified'
                        match['quality_level'] = 'high'
                        real_score_matches.append(match)
                except ValueError:
                    continue
        
        self.logger.info(f"‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {len(real_score_matches)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        
        if real_score_matches:
            self.logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –æ—Ç MarathonBet")
        else:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏")
            self.logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¥–æ–∂–¥–∞—Ç—å—Å—è –º–∞—Ç—á–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏")
        
        return real_score_matches
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        
        cached_scores = len(self._scores_cache)
        
        if cached_scores > 0:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
            non_draw_count = 0
            draw_count = 0
            
            for score in self._scores_cache.values():
                try:
                    home, away = map(int, score.split(':'))
                    if home == away:
                        draw_count += 1
                    else:
                        non_draw_count += 1
                except:
                    continue
            
            return {
                'total_scores': cached_scores,
                'non_draw_scores': non_draw_count,
                'draw_scores': draw_count,
                'non_draw_percentage': (non_draw_count / cached_scores * 100) if cached_scores > 0 else 0,
                'cache_status': 'active',
                'best_source': self.score_sources[0]['name'] if self.score_sources else 'unknown'
            }
        else:
            return {
                'total_scores': 0,
                'non_draw_scores': 0,
                'draw_scores': 0,
                'non_draw_percentage': 0,
                'cache_status': 'empty',
                'best_source': 'none'
            }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_hybrid_provider():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    
    import logging
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    provider = HybridScoreProvider(logger)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    scores = provider.get_live_scores_from_best_source()
    
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(scores)}")
    
    if scores:
        print("–ü—Ä–∏–º–µ—Ä—ã —Å—á–µ—Ç–æ–≤:")
        for key, score in list(scores.items())[:5]:
            print(f"  {key}: {score}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = provider.get_statistics()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ: {stats['total_scores']}")
    print(f"  –ù–µ–Ω–∏—á–µ–π–Ω—ã—Ö: {stats['non_draw_scores']}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö: {stats['non_draw_percentage']:.1f}%")


if __name__ == "__main__":
    test_hybrid_provider()