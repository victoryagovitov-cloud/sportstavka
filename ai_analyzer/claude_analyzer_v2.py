"""
Claude AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –í–∞—Ä–∏–∞–Ω—Ç–∞ 2 - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π
Claude AI —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏—â–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑
"""

import os
import time
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
import json

try:
    import anthropic
except ImportError:
    anthropic = None

from utils.claude_prompt_optimizer import ImprovedClaudePrompt

class ClaudeAnalyzerV2:
    """
    Claude AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –í–∞—Ä–∏–∞–Ω—Ç–∞ 2 - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–Ω–∞–ª–∏–∑
    """
    
    def __init__(self, logger: Optional[logging.Logger] = None):
        self.logger = logger or logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude AI –∫–ª–∏–µ–Ω—Ç–∞
        self.client = None
        self.api_key = os.getenv('CLAUDE_API_KEY')
        
        if self.api_key and anthropic:
            try:
                self.client = anthropic.Anthropic(api_key=self.api_key)
                self.logger.info("‚úÖ Claude AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude AI: {e}")
        else:
            self.logger.warning("‚ö†Ô∏è CLAUDE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_config = {
            'model': 'claude-3-sonnet-20240229',
            'max_tokens': 4000,
            'temperature': 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            'timeout': 120       # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            'total_requests': 0,
            'successful_analyses': 0,
            'failed_analyses': 0,
            'total_tokens_used': 0,
            'total_cost': 0.0,
            'average_response_time': 0.0
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_generator = ImprovedClaudePrompt()
    
    def analyze_matches_independently(self, matches: List[Dict[str, Any]], 
                                    analysis_type: str = 'conservative') -> Optional[str]:
        """
        –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ Claude AI (–í–∞—Ä–∏–∞–Ω—Ç 2)
        """
        if not matches:
            self.logger.warning("–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        if not self.client:
            self.logger.error("Claude AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return self._get_demo_analysis(matches)  # –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        try:
            self.logger.info(f"üß† –ó–∞–ø—É—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Claude AI –¥–ª—è {len(matches)} –º–∞—Ç—á–µ–π")
            
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = self.prompt_generator.create_enhanced_prompt(matches)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude AI
            response = self.client.messages.create(
                model=self.analysis_config['model'],
                max_tokens=self.analysis_config['max_tokens'],
                temperature=self.analysis_config['temperature'],
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            analysis_time = time.time() - start_time
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            analysis_result = response.content[0].text if response.content else ""
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(response, analysis_time, success=True)
            
            self.logger.info(f"‚úÖ Claude AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f}—Å")
            self.logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: input={response.usage.input_tokens}, output={response.usage.output_tokens}")
            
            return analysis_result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Claude AI: {e}")
            self._update_stats(None, 0, success=False)
            
            # Fallback –∫ –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑—É
            return self._get_demo_analysis(matches)
    
    def _get_demo_analysis(self, matches: List[Dict[str, Any]]) -> str:
        """
        –î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–≥–¥–∞ Claude AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        """
        self.logger.info("üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑ (Claude AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        demo_analyses = []
        
        for i, match in enumerate(matches[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 –º–∞—Ç—á–µ–π
            team1 = match.get('team1', '–ö–æ–º–∞–Ω–¥–∞ –ê')
            team2 = match.get('team2', '–ö–æ–º–∞–Ω–¥–∞ –ë')
            odds = match.get('odds', {})
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            p1 = float(odds.get('–ü1', 2.0))
            p2 = float(odds.get('–ü2', 2.0))
            x = float(odds.get('X', 3.0))
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–æ–¥ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö –º–∞—Ç—á–µ–π
            if min(p1, p2) < 1.3:
                recommendation = "–ü–†–û–ü–£–°–ö"
                reason = "–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –Ω–µ—Ç value"
                risk = "–Ω–∏–∑–∫–∏–π üü¢"
            elif min(p1, p2) > 3.0:
                recommendation = "–ü–†–û–ü–£–°–ö"
                reason = "–í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–∞"
                risk = "–≤—ã—Å–æ–∫–∏–π üî¥"
            else:
                # –í –Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
                if p1 < p2:
                    recommendation = "–°–¢–ê–í–ö–ê –Ω–∞ –ü1 (–ª–∏–¥–µ—Ä —É–¥–µ—Ä–∂–∏—Ç)"
                    reason = "–í–µ–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏–≥—Ä—É"
                else:
                    recommendation = "–°–¢–ê–í–ö–ê –Ω–∞ –ü2 (–æ—Ç—ã–≥—Ä—ã—à –≤–æ–∑–º–æ–∂–µ–Ω)"
                    reason = "–û—Ç—Å—Ç–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è"
                risk = "—Å—Ä–µ–¥–Ω–∏–π üü°"
            
            demo_analysis = f"""üèÜ {team1} vs {team2}
üí∞ MarathonBet: –ü1 {odds.get('–ü1')} | X {odds.get('X')} | –ü2 {odds.get('–ü2')}
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: [–î–ï–ú–û] –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}
üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reason}
‚ö†Ô∏è –†–∏—Å–∫: {risk}

---"""
            
            demo_analyses.append(demo_analysis)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        header = f"""ü§ñ –î–ï–ú–û-–ê–ù–ê–õ–ò–ó | üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú

üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(demo_analyses)} –∏–∑ {len(matches)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö')}
üéØ –§–æ–∫—É—Å: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ value opportunities
‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º, —Ä–µ–∞–ª—å–Ω—ã–π Claude AI –¥–∞—Å—Ç –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑

{'='*50}

"""
        
        footer = f"""{'='*50}

üí° –î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö MarathonBet
üõ°Ô∏è –†–µ–∞–ª—å–Ω—ã–π Claude AI –Ω–∞–π–¥–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
üìä –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Claude AI —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLAUDE_API_KEY
ü§ñ –î–µ–º–æ-—Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
        
        return header + '\n\n'.join(demo_analyses) + '\n\n' + footer
    
    def _update_stats(self, response, analysis_time: float, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.stats['total_requests'] += 1
        
        if success and response:
            self.stats['successful_analyses'] += 1
            
            # –¢–æ–∫–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            if hasattr(response, 'usage'):
                input_tokens = response.usage.input_tokens
                output_tokens = response.usage.output_tokens
                total_tokens = input_tokens + output_tokens
                
                self.stats['total_tokens_used'] += total_tokens
                
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π)
                cost_per_1k_input = 0.003  # $0.003 –∑–∞ 1K input —Ç–æ–∫–µ–Ω–æ–≤
                cost_per_1k_output = 0.015  # $0.015 –∑–∞ 1K output —Ç–æ–∫–µ–Ω–æ–≤
                
                request_cost = (input_tokens / 1000 * cost_per_1k_input + 
                              output_tokens / 1000 * cost_per_1k_output)
                
                self.stats['total_cost'] += request_cost
        else:
            self.stats['failed_analyses'] += 1
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if self.stats['total_requests'] > 0:
            total_time = self.stats.get('total_time', 0) + analysis_time
            self.stats['total_time'] = total_time
            self.stats['average_response_time'] = total_time / self.stats['total_requests']
    
    def get_analysis_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        success_rate = 0.0
        if self.stats['total_requests'] > 0:
            success_rate = (self.stats['successful_analyses'] / self.stats['total_requests']) * 100
        
        avg_cost_per_analysis = 0.0
        if self.stats['successful_analyses'] > 0:
            avg_cost_per_analysis = self.stats['total_cost'] / self.stats['successful_analyses']
        
        return {
            'total_requests': self.stats['total_requests'],
            'successful_analyses': self.stats['successful_analyses'],
            'failed_analyses': self.stats['failed_analyses'],
            'success_rate': round(success_rate, 2),
            'total_tokens_used': self.stats['total_tokens_used'],
            'total_cost': round(self.stats['total_cost'], 4),
            'average_cost_per_analysis': round(avg_cost_per_analysis, 4),
            'average_response_time': round(self.stats['average_response_time'], 2),
            'client_available': self.client is not None
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'total_requests': 0,
            'successful_analyses': 0,
            'failed_analyses': 0,
            'total_tokens_used': 0,
            'total_cost': 0.0,
            'average_response_time': 0.0
        }
        self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def test_claude_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Claude AI"""
        if not self.client:
            return False
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = self.client.messages.create(
                model=self.analysis_config['model'],
                max_tokens=100,
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."}]
            )
            
            self.logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Claude AI —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Claude AI: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
def create_claude_analyzer_v2(logger: Optional[logging.Logger] = None) -> ClaudeAnalyzerV2:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ Claude AI –¥–ª—è –í–∞—Ä–∏–∞–Ω—Ç–∞ 2"""
    return ClaudeAnalyzerV2(logger)