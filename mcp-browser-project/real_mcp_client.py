"""
–†–µ–∞–ª—å–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è browser-use
"""
import asyncio
import logging
from mcp.client.stdio import stdio_client
from mcp import ClientSession, StdioServerParameters
from typing import List, Dict, Any, Optional
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('real_mcp_client')

class RealMCPBrowserClient:
    """–†–µ–∞–ª—å–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è browser-use"""
    
    def __init__(self, logger):
        self.logger = logger
        self.session: Optional[ClientSession] = None
        self.server_params = StdioServerParameters(
            command="python",
            args=["-c", "from browser_use.cli import main; main()", "--mcp"]
        )
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É MCP —Å–µ—Ä–≤–µ—Ä—É browser-use...")
            read, write = await stdio_client(self.server_params).__aenter__()
            self.session = ClientSession(read, write)
            await self.session.initialize()
            self.logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä browser-use –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.session:
            try:
                await self.session.__aexit__(None, None, None)
                self.session = None
                self.logger.info("üîå MCP —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def navigate(self, url: str) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ URL"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            result = await self.session.call_tool("browser_navigate", arguments={"url": url})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content.text}")
                    return "success" in content.text.lower()
                elif isinstance(content, str):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content}")
                    return "success" in content.lower()
            
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_content(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        
        try:
            self.logger.info("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            result = await self.session.call_tool("browser_get_content", arguments={})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content.text
                elif isinstance(content, str):
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content
            
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    async def take_screenshot(self, path: str = "screenshot.png") -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            self.logger.info(f"üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {path}")
            result = await self.session.call_tool("browser_take_screenshot", arguments={"path": path})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    return "success" in content.text.lower()
                elif isinstance(content, str):
                    return "success" in content.lower()
            
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return False
    
    async def find_elements(self, selector: str) -> List[str]:
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []
        
        try:
            self.logger.info(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {selector}")
            result = await self.session.call_tool("browser_find_elements", arguments={"selector": selector})
            
            elements = []
            if result.content:
                for item in result.content:
                    if hasattr(item, 'text'):
                        elements.append(item.text)
                    elif isinstance(item, str):
                        elements.append(item)
            
            return elements
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return []

class RealBetBoomScraper:
    """–†–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä BetBoom —á–µ—Ä–µ–∑ MCP Browser"""
    
    def __init__(self, logger):
        self.logger = logger
        self.mcp_client = RealMCPBrowserClient(logger)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        return await self.mcp_client.connect()
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        await self.mcp_client.disconnect()
    
    async def get_live_matches(self, sport: str = 'football') -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ live –º–∞—Ç—á–µ–π"""
        self.logger.info(f"‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ live –º–∞—Ç—á–µ–π –¥–ª—è {sport}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Ä—Ç–∞
        if sport == 'football':
            url = "https://betboom.ru/sport/football?type=live"
        elif sport == 'tennis':
            url = "https://betboom.ru/sport/tennis?type=live"
        else:
            url = f"https://betboom.ru/sport/{sport}?type=live"
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not await self.mcp_client.navigate(url):
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ {url}")
                return []
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = await self.mcp_client.get_content()
            if not content:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return []
            
            # –ü–∞—Ä—Å–∏–º –º–∞—Ç—á–∏
            matches = self.parse_betboom_content(content, sport)
            
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è {sport}")
            return matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π: {e}")
            return []
    
    def parse_betboom_content(self, html: str, sport: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BetBoom"""
        matches = []
        
        try:
            from bs4 import BeautifulSoup
            import re
            
            soup = BeautifulSoup(html, 'html.parser')
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–∞—Ç—á–∞–º–∏
            match_selectors = [
                '.match-item',
                '.game-item',
                '.event-item',
                '[class*="match"]',
                '[class*="game"]',
                '[class*="event"]',
                '[class*="live"]'
            ]
            
            for selector in match_selectors:
                elements = soup.select(selector)
                if elements:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    for element in elements[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
                        try:
                            match_data = self.extract_match_data(element, sport)
                            if match_data:
                                matches.append(match_data)
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                            continue
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            if not matches:
                self.logger.info("–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É...")
                matches = self.find_matches_by_text(soup, sport)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
        
        return matches
    
    def extract_match_data(self, element, sport: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã/–∏–≥—Ä–æ–∫–æ–≤
            team_elements = element.find_all(['span', 'div', 'a'], class_=lambda x: x and any(
                word in x.lower() for word in ['team', 'player', 'name', 'title']
            ))
            
            if len(team_elements) >= 2:
                team1 = team_elements[0].get_text(strip=True)
                team2 = team_elements[1].get_text(strip=True)
                
                # –ò—â–µ–º —Å—á–µ—Ç
                score_elements = element.find_all(['span', 'div'], class_=lambda x: x and any(
                    word in x.lower() for word in ['score', 'result', 'count']
                ))
                score = score_elements[0].get_text(strip=True) if score_elements else "LIVE"
                
                # –ò—â–µ–º –≤—Ä–µ–º—è
                time_elements = element.find_all(['span', 'div'], class_=lambda x: x and any(
                    word in x.lower() for word in ['time', 'minute', 'clock']
                ))
                time_str = time_elements[0].get_text(strip=True) if time_elements else "LIVE"
                
                return {
                    'team1': team1,
                    'team2': team2,
                    'score': score,
                    'time': time_str,
                    'sport': sport,
                    'source': 'real_mcp_browser_use'
                }
        
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: {e}")
        
        return None
    
    def find_matches_by_text(self, soup, sport: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É (fallback –º–µ—Ç–æ–¥)"""
        matches = []
        
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2" –∏–ª–∏ "–ò–≥—Ä–æ–∫1 vs –ò–≥—Ä–æ–∫2"
            text = soup.get_text()
            lines = text.split('\n')
            
            for line in lines:
                line = line.strip()
                if len(line) > 10 and len(line) < 200:  # –†–∞–∑—É–º–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω –º–∞—Ç—á–∞
                    if any(word in line.lower() for word in ['vs', 'v', '–ø—Ä–æ—Ç–∏–≤', '-']):
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—ã
                        parts = line.split(' vs ')
                        if len(parts) == 2:
                            team1 = parts[0].strip()
                            team2 = parts[1].strip()
                            
                            matches.append({
                                'team1': team1,
                                'team2': team2,
                                'score': 'LIVE',
                                'time': 'LIVE',
                                'sport': sport,
                                'source': 'real_mcp_browser_use_text'
                            })
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
        
        return matches

async def test_real_mcp_browser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MCP Browser –¥–ª—è BetBoom"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MCP Browser –¥–ª—è BetBoom")
    
    urls_to_test = [
        ('https://betboom.ru/sport/football?type=live', 'football'),
        ('https://betboom.ru/sport/tennis?type=live', 'tennis')
    ]
    
    scraper = RealBetBoomScraper(logger)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
        if not await scraper.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π URL
        for url, sport in urls_to_test:
            logger.info(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {url} ({sport})")
            
            matches = await scraper.get_live_matches(sport)
            
            if matches:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π
                for i, match in enumerate(matches[:5]):
                    logger.info(f"  {i+1}. {match['team1']} vs {match['team2']} - {match['score']} ({match['sport']})")
                
                if len(matches) > 5:
                    logger.info(f"  ... –∏ –µ—â–µ {len(matches) - 5} –º–∞—Ç—á–µ–π")
            else:
                logger.warning("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info("\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
        if await scraper.mcp_client.take_screenshot("betboom_real_screenshot.png"):
            logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: betboom_real_screenshot.png")
        else:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await scraper.disconnect()
        logger.info("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_real_mcp_browser())