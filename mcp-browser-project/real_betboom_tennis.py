"""
–†–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom —á–µ—Ä–µ–∑ MCP Browser
"""
import asyncio
import logging
from mcp.client.stdio import stdio_client
from mcp import ClientSession, StdioServerParameters
from typing import List, Dict, Any, Optional
import json
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('real_betboom_tennis')

class RealBetBoomTennisScraper:
    """–†–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom —á–µ—Ä–µ–∑ MCP Browser"""
    
    def __init__(self, logger):
        self.logger = logger
        self.session: Optional[ClientSession] = None
        self.server_params = StdioServerParameters(
            command="python",
            args=["-c", "from browser_use.cli import main; main()", "--mcp"]
        )
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É browser-use...")
            read, write = await stdio_client(self.server_params).__aenter__()
            self.session = ClientSession(read, write)
            await self.session.initialize()
            self.logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.session:
            try:
                await self.session.__aexit__(None, None, None)
                self.session = None
                self.logger.info("üîå MCP —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def navigate_to_tennis(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            url = "https://betboom.ru/sport/tennis?type=live"
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            result = await self.session.call_tool("browser_navigate", arguments={"url": url})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content.text}")
                    return "success" in content.text.lower()
                elif isinstance(content, str):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content}")
                    return "success" in content.lower()
            
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_page_content(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        
        try:
            self.logger.info("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            result = await self.session.call_tool("browser_get_content", arguments={})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content.text
                elif isinstance(content, str):
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content
            
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    async def take_screenshot(self, path: str = "betboom_tennis_screenshot.png") -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            self.logger.info(f"üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {path}")
            result = await self.session.call_tool("browser_take_screenshot", arguments={"path": path})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    return "success" in content.text.lower()
                elif isinstance(content, str):
                    return "success" in content.lower()
            
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return False
    
    def parse_tennis_matches(self, html_content: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏–∑ HTML"""
        matches = []
        
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞—Ç—á–µ–π
            match_selectors = [
                '.sport-event',
                '.bet-item',
                '.match-item',
                '.game-item',
                '.event-item',
                '[class*="match"]',
                '[class*="game"]',
                '[class*="event"]',
                '[class*="live"]',
                '[class*="tennis"]'
            ]
            
            found_matches = []
            
            for selector in match_selectors:
                elements = soup.select(selector)
                if elements:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    found_matches.extend(elements)
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            if not found_matches:
                self.logger.info("–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É...")
                # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
                all_elements = soup.find_all(text=re.compile(r'(WTA|ATP|ITF|—Ç–µ–Ω–Ω–∏—Å|tennis|—Å–µ—Ç|set)', re.IGNORECASE))
                for element in all_elements:
                    parent = element.parent
                    if parent and parent not in found_matches:
                        found_matches.append(parent)
            
            # –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in found_matches[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    match_data = self.extract_match_data(element)
                    if match_data:
                        matches.append(match_data)
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if not matches:
                self.logger.info("–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                text_matches = self.find_matches_in_text(html_content)
                matches.extend(text_matches)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
        
        return matches
    
    def extract_match_data(self, element) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            text = element.get_text(strip=True)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            if len(text) < 10 or len(text) > 500:
                return None
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π
            patterns = [
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)',
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+-\d+)\s+(\d+-\d+)',
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, text)
                if match:
                    groups = match.groups()
                    if len(groups) >= 2:
                        player1 = groups[0].strip()
                        player2 = groups[1].strip()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç
                        score = " ".join(groups[2:]) if len(groups) > 2 else "LIVE"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π —Å—á–µ—Ç
                        if self.is_non_tie_score(score):
                            return {
                                'player1': player1,
                                'player2': player2,
                                'score': score,
                                'status': 'LIVE',
                                'sport': 'tennis',
                                'source': 'betboom_mcp',
                                'raw_text': text[:100] + "..." if len(text) > 100 else text
                            }
            
            return None
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: {e}")
            return None
    
    def find_matches_in_text(self, html_content: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        matches = []
        
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
            lines = html_content.split('\n')
            
            for line in lines:
                line = line.strip()
                if len(line) < 20 or len(line) > 200:
                    continue
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
                if any(term in line.lower() for term in ['wta', 'atp', 'itf', '—Ç–µ–Ω–Ω–∏—Å', 'tennis']):
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                    match_data = self.extract_match_from_text(line)
                    if match_data:
                        matches.append(match_data)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {e}")
        
        return matches
    
    def extract_match_from_text(self, text: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π
            patterns = [
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)',
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+-\d+)\s+(\d+-\d+)',
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, text)
                if match:
                    groups = match.groups()
                    if len(groups) >= 2:
                        player1 = groups[0].strip()
                        player2 = groups[1].strip()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç
                        score = " ".join(groups[2:]) if len(groups) > 2 else "LIVE"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π —Å—á–µ—Ç
                        if self.is_non_tie_score(score):
                            return {
                                'player1': player1,
                                'player2': player2,
                                'score': score,
                                'status': 'LIVE',
                                'sport': 'tennis',
                                'source': 'betboom_mcp',
                                'raw_text': text[:100] + "..." if len(text) > 100 else text
                            }
            
            return None
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def is_non_tie_score(self, score: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—á–µ—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π –ø–æ —Å–µ—Ç–∞–º"""
        try:
            score = score.strip()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ—Ç–∞: —Ü–∏—Ñ—Ä–∞-—Ü–∏—Ñ—Ä–∞
            set_pattern = r'\d+-\d+'
            sets = re.findall(set_pattern, score)
            
            if not sets:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
                numbers = re.findall(r'\d+', score)
                if len(numbers) >= 2:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∏—Å–ª–∞
                    return len(set(numbers)) > 1
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ç
            for set_score in sets:
                parts = set_score.split('-')
                if len(parts) == 2:
                    try:
                        score1 = int(parts[0])
                        score2 = int(parts[1])
                        
                        # –ï—Å–ª–∏ —Å—á–µ—Ç —Ä–∞–≤–Ω—ã–π, —ç—Ç–æ –Ω–∏—á—å—è
                        if score1 == score2:
                            return False
                        
                        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 2, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏—á—å—è
                        if abs(score1 - score2) < 2:
                            return False
                            
                    except ValueError:
                        continue
            
            return True
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ '{score}': {e}")
            return False

async def scrape_real_tennis_matches():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
    logger.info("üéæ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom")
    
    scraper = RealBetBoomTennisScraper(logger)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
        if not await scraper.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
            return []
        
        logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞
        if not await scraper.navigate_to_tennis():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞")
            return []
        
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await asyncio.sleep(8)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await scraper.take_screenshot("betboom_tennis_real.png")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content = await scraper.get_page_content()
        if not content:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return []
        
        logger.info("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open("betboom_tennis_content.html", "w", encoding="utf-8") as f:
            f.write(content)
        logger.info("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ betboom_tennis_content.html")
        
        # –ü–∞—Ä—Å–∏–º –º–∞—Ç—á–∏
        matches = scraper.parse_tennis_matches(content)
        
        if matches:
            logger.info(f"üéæ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "="*100)
            print("üéæ –†–ï–ê–õ–¨–ù–´–ï –¢–ï–ù–ù–ò–°–ù–´–ï –ú–ê–¢–ß–ò –° BETBOOM (MCP Browser)")
            print("="*100)
            print(f"üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: https://betboom.ru/sport/tennis?type=live")
            print(f"üîß –ú–µ—Ç–æ–¥: MCP Browser Python SDK")
            print("="*100)
            
            for i, match in enumerate(matches, 1):
                print(f"{i:2d}. {match['player1']} vs {match['player2']}")
                print(f"    –°—á–µ—Ç: {match['score']} ({match['status']})")
                print(f"    –°–ø–æ—Ä—Ç: {match['sport']} | –ò—Å—Ç–æ—á–Ω–∏–∫: {match['source']}")
                print(f"    Raw: {match.get('raw_text', 'N/A')}")
                print()
            
            print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(matches)} –º–∞—Ç—á–µ–π")
            print("="*100)
        else:
            logger.warning("‚ùå –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("\n‚ùå –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        return matches
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return []
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await scraper.disconnect()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(scrape_real_tennis_matches())