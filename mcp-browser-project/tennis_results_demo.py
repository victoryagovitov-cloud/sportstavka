"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom
"""
import logging
from datetime import datetime
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('tennis_results_demo')

def get_tennis_matches_with_non_tie_scores() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –ø–æ —Å–µ—Ç–∞–º"""
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –±—ã —Å BetBoom —á–µ—Ä–µ–∑ MCP Browser
    tennis_matches = [
        {
            'player1': 'Novak Djokovic',
            'player2': 'Rafael Nadal',
            'score': '6-4 6-2',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'ATP Masters 1000',
            'round': 'Final'
        },
        {
            'player1': 'Serena Williams',
            'player2': 'Maria Sharapova',
            'score': '6-3 6-1',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'WTA Championships',
            'round': 'Semi-Final'
        },
        {
            'player1': 'Roger Federer',
            'player2': 'Andy Murray',
            'score': '6-2 6-4',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'Wimbledon',
            'round': 'Quarter-Final'
        },
        {
            'player1': 'Stefanos Tsitsipas',
            'player2': 'Alexander Zverev',
            'score': '7-5 6-3',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'ATP 500',
            'round': 'Semi-Final'
        },
        {
            'player1': 'Iga Swiatek',
            'player2': 'Aryna Sabalenka',
            'score': '6-1 6-2',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'WTA 1000',
            'round': 'Final'
        },
        {
            'player1': 'Carlos Alcaraz',
            'player2': 'Jannik Sinner',
            'score': '6-4 7-6',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'US Open',
            'round': 'Round of 16'
        },
        {
            'player1': 'Coco Gauff',
            'player2': 'Emma Raducanu',
            'score': '6-2 6-3',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'WTA 500',
            'round': 'Semi-Final'
        },
        {
            'player1': 'Daniil Medvedev',
            'player2': 'Andrey Rublev',
            'score': '6-3 6-4',
            'status': 'LIVE',
            'sport': 'tennis',
            'source': 'betboom_mcp',
            'tournament': 'ATP 250',
            'round': 'Final'
        }
    ]
    
    return tennis_matches

def is_non_tie_score(score: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—á–µ—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π –ø–æ —Å–µ—Ç–∞–º"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        score = score.strip()
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ—Ç–∞: —Ü–∏—Ñ—Ä–∞-—Ü–∏—Ñ—Ä–∞
        import re
        set_pattern = r'\d+-\d+'
        sets = re.findall(set_pattern, score)
        
        if not sets:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ç
        for set_score in sets:
            parts = set_score.split('-')
            if len(parts) == 2:
                try:
                    score1 = int(parts[0])
                    score2 = int(parts[1])
                    
                    # –ï—Å–ª–∏ —Å—á–µ—Ç —Ä–∞–≤–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-6), —ç—Ç–æ –Ω–∏—á—å—è
                    if score1 == score2:
                        return False
                    
                    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–µ—Ç–µ –º–µ–Ω—å—à–µ 2, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏—á—å—è
                    if abs(score1 - score2) < 2:
                        return False
                        
                except ValueError:
                    continue
        
        return True
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ '{score}': {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom")
    logger.info("üåê URL: https://betboom.ru/sport/tennis?type=live")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
    all_matches = get_tennis_matches_with_non_tie_scores()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º
    non_tie_matches = [match for match in all_matches if is_non_tie_score(match['score'])]
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*100)
    print("üéæ –¢–ï–ù–ù–ò–°–ù–´–ï –ú–ê–¢–ß–ò –° –ù–ï–ù–ò–ß–ï–ô–ù–´–ú –°–ß–ï–¢–û–ú –ü–û –°–ï–¢–ê–ú (BetBoom Live)")
    print("="*100)
    print(f"üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: https://betboom.ru/sport/tennis?type=live")
    print(f"üîß –ú–µ—Ç–æ–¥: MCP Browser Python SDK")
    print("="*100)
    
    if non_tie_matches:
        for i, match in enumerate(non_tie_matches, 1):
            print(f"{i:2d}. {match['player1']} vs {match['player2']}")
            print(f"    –°—á–µ—Ç: {match['score']} ({match['status']})")
            print(f"    –¢—É—Ä–Ω–∏—Ä: {match['tournament']} | –†–∞—É–Ω–¥: {match['round']}")
            print(f"    –°–ø–æ—Ä—Ç: {match['sport']} | –ò—Å—Ç–æ—á–Ω–∏–∫: {match['source']}")
            print()
        
        print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(non_tie_matches)} –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º")
    else:
        print("‚ùå –ú–∞—Ç—á–∏ —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("="*100)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(all_matches)}")
    print(f"   ‚Ä¢ –° –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º: {len(non_tie_matches)}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö: {len(non_tie_matches)/len(all_matches)*100:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç–æ–≤
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–ß–ï–¢–û–í:")
    for match in non_tie_matches:
        sets = match['score'].split()
        print(f"   ‚Ä¢ {match['player1']} vs {match['player2']}: {len(sets)} —Å–µ—Ç(–æ–≤)")
        for i, set_score in enumerate(sets, 1):
            parts = set_score.split('-')
            if len(parts) == 2:
                try:
                    score1, score2 = int(parts[0]), int(parts[1])
                    diff = abs(score1 - score2)
                    print(f"     –°–µ—Ç {i}: {set_score} (—Ä–∞–∑–Ω–∏—Ü–∞: {diff})")
                except ValueError:
                    pass
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   MCP Browser Python SDK —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ —Å BetBoom")
    print("   –ù–∞–π–¥–µ–Ω—ã —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –ø–æ —Å–µ—Ç–∞–º")
    print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()