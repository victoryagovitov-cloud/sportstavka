"""
–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ TrueLiveBet
–§–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import logging
from datetime import datetime
from typing import List, Dict, Any
import pytz


class CustomTelegramFormatter:
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ TrueLiveBet
    
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±—É–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ú–°–ö
    - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
    - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ç—á—É
    - –§—É—Ç–µ—Ä —Å –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–º
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.moscow_tz = pytz.timezone('Europe/Moscow')
    
    def format_live_recommendations(self, matches: List[Dict[str, Any]], analysis_result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç live —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Å—Ç–∏–ª–µ
        
        Args:
            matches: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Claude AI
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_time = datetime.now(self.moscow_tz)
        time_str = moscow_time.strftime("%H:%M –ú–°–ö, %d.%m.%Y")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"üéØ LIVE-–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ù–ê ({time_str}) üéØ\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        sports_groups = self._group_matches_by_sport(matches)
        
        match_counter = 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
        for sport, sport_matches in sports_groups.items():
            if not sport_matches:
                continue
                
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
            sport_header = self._get_sport_header(sport)
            message += f"{sport_header}\n\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ —ç—Ç–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
            for match in sport_matches:
                formatted_match = self._format_single_match(match, match_counter, sport)
                if formatted_match:
                    message += formatted_match + "\n\n"
                    match_counter += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
        message += self._get_footer()
        
        return message
    
    def _group_matches_by_sport(self, matches: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞"""
        
        groups = {
            'football': [],
            'tennis': [],
            'table_tennis': [],
            'handball': []
        }
        
        for match in matches:
            sport = match.get('sport', '').lower()
            if sport in groups:
                groups[sport].append(match)
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Ä—Ç –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                if any(key in match for key in ['team1', 'team2']):
                    groups['football'].append(match)
                elif any(key in match for key in ['player1', 'player2']):
                    groups['tennis'].append(match)
                else:
                    groups['football'].append(match)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ—É—Ç–±–æ–ª
        
        return groups
    
    def _get_sport_header(self, sport: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
        
        headers = {
            'football': "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n‚öΩ –§–£–¢–ë–û–õ ‚öΩ\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
            'tennis': "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\nüéæ –¢–ï–ù–ù–ò–° üéæ\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
            'table_tennis': "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\nüèì –ù–ê–°–¢–û–õ–¨–ù–´–ô –¢–ï–ù–ù–ò–° üèì\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
            'handball': "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\nü§æ –ì–ê–ù–î–ë–û–õ ü§æ\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
        }
        
        return headers.get(sport, "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n‚öΩ –°–ü–û–†–¢ ‚öΩ\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
    
    def _format_single_match(self, match: Dict[str, Any], counter: int, sport: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –º–∞—Ç—á –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Å—Ç–∏–ª–µ"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
            if sport == 'tennis':
                team1 = match.get('player1', match.get('team1', '–ò–≥—Ä–æ–∫ 1'))
                team2 = match.get('player2', match.get('team2', '–ò–≥—Ä–æ–∫ 2'))
                sport_emoji = "üéæ"
            else:
                team1 = match.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
                team2 = match.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
                sport_emoji = {"football": "‚öΩ", "table_tennis": "üèì", "handball": "ü§æ"}.get(sport, "‚öΩ")
            
            score = match.get('score', 'LIVE')
            time = match.get('time', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            odds = match.get('odds', {})
            p1_coeff = odds.get('–ü1', odds.get('1', '1.85'))
            p2_coeff = odds.get('–ü2', odds.get('2', '2.10'))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            recommendation, reasoning = self._generate_recommendation(match, sport)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_time = self._format_display_time(time, sport)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç—á–∞
            match_message = f"{counter}. {sport_emoji} {team1} ‚Äì {team2}\n"
            
            if sport == 'tennis':
                match_message += f"üéØ –°—á–µ—Ç: {score} ({display_time})\n"
                match_message += f"‚úÖ –°—Ç–∞–≤–∫–∞: {recommendation}\n"
                match_message += f"üìä –ö—ç—Ñ: {p1_coeff if '–ü1' in recommendation else p2_coeff}\n"
            else:
                match_message += f"üèüÔ∏è –°—á–µ—Ç: {score} ({display_time})\n"
                match_message += f"‚úÖ –°—Ç–∞–≤–∫–∞: {recommendation}\n"
                match_message += f"üìä –ö—ç—Ñ: {p1_coeff if '–ü1' in recommendation else p2_coeff}\n"
            
            match_message += f"üìå {reasoning}"
            
            return match_message
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞: {e}")
            return None
    
    def _generate_recommendation(self, match: Dict[str, Any], sport: str) -> tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"""
        
        try:
            score = match.get('score', 'LIVE')
            odds = match.get('odds', {})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–∞
            if ':' in score:
                if sport == 'tennis':
                    # –î–ª—è —Ç–µ–Ω–Ω–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Å–µ—Ç–∞–º
                    sets_score = score.split('(')[0].strip()
                    home_sets, away_sets = map(int, sets_score.split(':'))
                    
                    if home_sets > away_sets:
                        recommendation = f"–ü–æ–±–µ–¥–∞ {match.get('player1', match.get('team1', '–ü–µ—Ä–≤—ã–π'))}"
                        reasoning = f"–ò–≥—Ä–æ–∫ –ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ —Å–µ—Ç–∞–º {home_sets}:{away_sets}, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ö–æ–¥ –º–∞—Ç—á–∞"
                    else:
                        recommendation = f"–ü–æ–±–µ–¥–∞ {match.get('player2', match.get('team2', '–í—Ç–æ—Ä–æ–π'))}"
                        reasoning = f"–ò–≥—Ä–æ–∫ –ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ —Å–µ—Ç–∞–º {away_sets}:{home_sets}, —É–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–≥—Ä–∞"
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
                    home_score, away_score = map(int, score.split(':'))
                    
                    if home_score > away_score:
                        recommendation = "–ü1"
                        reasoning = f"–ö–æ–º–∞–Ω–¥–∞ –ª–∏–¥–∏—Ä—É–µ—Ç {home_score}:{away_score}, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏–≥—Ä—É, –∏–º–µ–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
                    else:
                        recommendation = "–ü2" 
                        reasoning = f"–ö–æ–º–∞–Ω–¥–∞ –ª–∏–¥–∏—Ä—É–µ—Ç {away_score}:{home_score}, —É–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–≥—Ä–∞, –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É"
            else:
                # –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
                p1 = float(odds.get('–ü1', odds.get('1', 2.0)))
                p2 = float(odds.get('–ü2', odds.get('2', 2.0)))
                
                if p1 < p2:
                    recommendation = "–ü1"
                    reasoning = "–§–∞–≤–æ—Ä–∏—Ç –º–∞—Ç—á–∞, —Ö–æ—Ä–æ—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏"
                else:
                    recommendation = "–ü2"
                    reasoning = "–°–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω–∞—è –±—É–∫–º–µ–∫–µ—Ä–∞–º–∏"
            
            return recommendation, reasoning
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            return "–ü1", "–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –º–∞—Ç—á–µ"
    
    def _format_display_time(self, time: str, sport: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        if sport == 'tennis':
            # –î–ª—è —Ç–µ–Ω–Ω–∏—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç –∏ —Å—á–µ—Ç
            if '—Å–µ—Ç' in time.lower():
                return time
            elif ':' in time:
                return f"—Ç–µ–∫—É—â–∏–π –≥–µ–π–º {time}"
            else:
                return "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã
            if ':' in time and len(time.split(':')) == 2:
                minutes = time.split(':')[0]
                return f"{minutes}'"
            elif time.endswith("'"):
                return time
            elif '–º–∏–Ω' in time:
                return time
            else:
                return "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    
    def _get_footer(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        footer = """‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
üíé TrueLiveBet ‚Äì –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –Ω–∞ –í–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üíé

‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä: –ù–∞—à–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –≤—ã–∏–≥—Ä—ã—à. –ù–æ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤."""
        
        return footer


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_custom_formatter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞"""
    
    import logging
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    formatter = CustomTelegramFormatter(logger)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
    test_matches = [
        {
            'team1': '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏',
            'team2': '–õ–∏–≤–µ—Ä–ø—É–ª—å',
            'score': '2:1',
            'time': '67:00',
            'sport': 'football',
            'odds': {'–ü1': '1.85', '–ü2': '2.10'}
        },
        {
            'player1': '–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á',
            'player2': '–ö–∞—Ä–ª–æ—Å –ê–ª—å–∫–∞—Ä–∞—Å',
            'score': '1:0 (6:4)',
            'time': '3:2',
            'sport': 'tennis',
            'odds': {'–ü1': '1.65', '–ü2': '2.25'}
        },
        {
            'team1': '–ù–æ—Ä–≤–µ–≥–∏—è',
            'team2': '–î–∞–Ω–∏—è',
            'score': '22:18',
            'time': '35:00',
            'sport': 'handball',
            'odds': {'–ü1': '1.75', '–ü2': '2.05'}
        }
    ]
    
    test_analysis = {
        'recommendations': ['–¢–µ—Å—Ç 1', '–¢–µ—Å—Ç 2', '–¢–µ—Å—Ç 3'],
        'total_matches': 3
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    formatted_message = formatter.format_live_recommendations(test_matches, test_analysis)
    
    print("üì± –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï:")
    print("=" * 50)
    print(formatted_message)
    print("=" * 50)


if __name__ == "__main__":
    test_custom_formatter()