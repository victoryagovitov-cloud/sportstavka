"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª
"""
import requests
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
import re
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from utils.time_utils import format_moscow_time

class TelegramReporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def send_report(self, recommendations: List[Dict[str, Any]]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            if not recommendations:
                return self._send_no_matches_message()
            
            report_text = self._build_report(recommendations)
            return self._send_message(report_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram: {e}")
            return False
    
    def _build_report(self, recommendations: List[Dict[str, Any]]) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        current_time = format_moscow_time()
        header = f"üéØ LIVE-–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ù–ê {current_time} üéØ"
        
        sections = [header, "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        sports_groups = self._group_by_sport(recommendations)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        for sport, matches in sports_groups.items():
            sport_section = self._build_sport_section(sport, matches)
            if sport_section:
                sections.extend(sport_section)
        
        # –ü–æ–¥–≤–∞–ª
        footer = [
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
            "üíé @TrueLiveBet ‚Äì –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! üíé",
            "",
            "‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä: –ù–∞—à–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, –Ω–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –ø—Ä–∏–±—ã–ª—å."
        ]
        
        sections.extend(footer)
        
        return "\n".join(sections)
    
    def _group_by_sport(self, recommendations: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        """
        groups = {}
        
        for rec in recommendations:
            sport = rec.get('sport', 'unknown')
            if sport not in groups:
                groups[sport] = []
            groups[sport].append(rec)
        
        return groups
    
    def _build_sport_section(self, sport: str, matches: List[Dict[str, Any]]) -> List[str]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        """
        sport_headers = {
            'football': '‚öΩ –§–£–¢–ë–û–õ ‚öΩ',
            'tennis': 'üéæ –¢–ï–ù–ù–ò–° üéæ',
            'table_tennis': 'üèì –ù–ê–°–¢–û–õ–¨–ù–´–ô –¢–ï–ù–ù–ò–° üèì',
            'handball': 'ü§æ –ì–ê–ù–î–ë–û–õ ü§æ'
        }
        
        header = sport_headers.get(sport, f'üèÜ {sport.upper()} üèÜ')
        section = [header, "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî", ""]
        
        for i, match in enumerate(matches, 1):
            match_text = self._format_match_recommendation(sport, match, i)
            section.append(match_text)
            section.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
        
        return section
    
    def _format_match_recommendation(self, sport: str, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        """
        if sport == 'football':
            return self._format_football_match(match, index)
        elif sport == 'tennis':
            return self._format_tennis_match(match, index)
        elif sport == 'table_tennis':
            return self._format_table_tennis_match(match, index)
        elif sport == 'handball':
            return self._format_handball_match(match, index)
        else:
            return self._format_generic_match(match, index)
    
    def _format_football_match(self, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
        """
        team1 = match.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
        team2 = match.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
        score = match.get('score', '0:0')
        time = match.get('time', '0\'')
        league = match.get('league', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–∏–≥–∞')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—Ç–∞–≤–∫—É
        bet_recommendation = self._get_football_bet_recommendation(match)
        odds = self._get_best_odds(match, bet_recommendation)
        
        # –í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Ç—á–∞
        remaining_time = self._calculate_remaining_time(time, 'football')
        
        # AI –∞–Ω–∞–ª–∏–∑
        analysis = match.get('ai_analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        lines = [
            f"{index}. ‚öΩ {team1} ‚Äì {team2}",
            f"üèüÔ∏è –°—á–µ—Ç: <b>{score}</b> ({time}) | –î–æ –∫–æ–Ω—Ü–∞: {remaining_time} | –õ–∏–≥–∞: {league}",
            f"‚úÖ –°—Ç–∞–≤–∫–∞: <b>{bet_recommendation}</b>",
            f"üìä –ö—ç—Ñ: <b>{odds}</b>",
            f"üìå <i>{analysis}</i>"
        ]
        
        return "\n".join(lines)
    
    def _format_tennis_match(self, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞
        """
        player1 = match.get('player1', '–ò–≥—Ä–æ–∫ 1')
        player2 = match.get('player2', '–ò–≥—Ä–æ–∫ 2')
        sets_score = match.get('sets_score', '0-0')
        current_set = match.get('current_set', '0-0')
        tournament = match.get('tournament', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—Ç–∞–≤–∫—É
        bet_recommendation = self._get_tennis_bet_recommendation(match)
        odds = self._get_best_odds(match, bet_recommendation)
        
        # AI –∞–Ω–∞–ª–∏–∑
        analysis = match.get('ai_analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        lines = [
            f"{index}. üéæ {player1} ‚Äì {player2}",
            f"üéØ –°—á–µ—Ç: {sets_score} ({current_set}) | –¢—É—Ä–Ω–∏—Ä: {tournament}",
            f"‚úÖ –°—Ç–∞–≤–∫–∞: <b>{bet_recommendation}</b>",
            f"üìä –ö—ç—Ñ: <b>{odds}</b>",
            f"üìå <i>{analysis}</i>"
        ]
        
        return "\n".join(lines)
    
    def _format_table_tennis_match(self, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞
        """
        player1 = match.get('player1', '–ò–≥—Ä–æ–∫ 1')
        player2 = match.get('player2', '–ò–≥—Ä–æ–∫ 2')
        sets_score = match.get('sets_score', '0-0')
        current_set = match.get('current_set', '0-0')
        tournament = match.get('tournament', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—Ç–∞–≤–∫—É
        bet_recommendation = self._get_table_tennis_bet_recommendation(match)
        odds = self._get_best_odds(match, bet_recommendation)
        
        # AI –∞–Ω–∞–ª–∏–∑
        analysis = match.get('ai_analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        lines = [
            f"{index}. üèì {player1} ‚Äì {player2}",
            f"üéØ –°—á–µ—Ç: {sets_score} ({current_set}) | –¢—É—Ä–Ω–∏—Ä: {tournament}",
            f"‚úÖ –°—Ç–∞–≤–∫–∞: <b>{bet_recommendation}</b>",
            f"üìä –ö—ç—Ñ: <b>{odds}</b>",
            f"üìå <i>{analysis}</i>"
        ]
        
        return "\n".join(lines)
    
    def _format_handball_match(self, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
        """
        team1 = match.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
        team2 = match.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
        score = match.get('score', '0:0')
        time = match.get('time', '0\'')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—á–µ—Ç —Ç–æ—Ç–∞–ª–æ–≤
        if 'totals_calculation' in match:
            return self._format_handball_totals(match, index)
        else:
            return self._format_handball_victory(match, index)
    
    def _format_handball_totals(self, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞ —Å —Ç–æ—Ç–∞–ª–∞–º–∏
        """
        team1 = match.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
        team2 = match.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
        score = match.get('score', '0:0')
        time = match.get('time', '0\'')
        
        totals = match.get('totals_calculation', {})
        predicted_total = totals.get('predicted_total', 'N/A')
        recommendation = totals.get('recommendation', 'N/A')
        reasoning = totals.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        lines = [
            f"{index}. ü§æ {team1} ‚Äì {team2}",
            f"üèüÔ∏è –°—á–µ—Ç: <b>{score}</b> ({time})",
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π —Ç–æ—Ç–∞–ª: <b>{predicted_total}</b> –≥–æ–ª–æ–≤",
            f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <b>{recommendation}</b>",
            f"üìå <i>{reasoning}</i>"
        ]
        
        return "\n".join(lines)
    
    def _format_handball_victory(self, match: Dict[str, Any], index: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞ –Ω–∞ –ø–æ–±–µ–¥—É
        """
        team1 = match.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
        team2 = match.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
        score = match.get('score', '0:0')
        time = match.get('time', '0\'')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—Ç–∞–≤–∫—É
        bet_recommendation = self._get_handball_bet_recommendation(match)
        odds = self._get_best_odds(match, bet_recommendation)
        
        # AI –∞–Ω–∞–ª–∏–∑
        analysis = match.get('ai_analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        lines = [
            f"{index}. ü§æ {team1} ‚Äì {team2}",
            f"üèüÔ∏è –°—á–µ—Ç: <b>{score}</b> ({time})",
            f"‚úÖ –°—Ç–∞–≤–∫–∞: <b>{bet_recommendation}</b>",
            f"üìä –ö—ç—Ñ: <b>{odds}</b>",
            f"üìå <i>{analysis}</i>"
        ]
        
        return "\n".join(lines)
    
    def _format_generic_match(self, match: Dict[str, Any], index: int) -> str:
        """
        –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
        """
        participants = f"{match.get('team1', match.get('player1', '–£—á–∞—Å—Ç–Ω–∏–∫ 1'))} ‚Äì {match.get('team2', match.get('player2', '–£—á–∞—Å—Ç–Ω–∏–∫ 2'))}"
        score = match.get('score', match.get('sets_score', '0:0'))
        
        analysis = match.get('ai_analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        lines = [
            f"{index}. üèÜ {participants}",
            f"üéØ –°—á–µ—Ç: <b>{score}</b>",
            f"üìå <i>{analysis}</i>"
        ]
        
        return "\n".join(lines)
    
    def _get_football_bet_recommendation(self, match: Dict[str, Any]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞
        """
        score = match.get('score', '0:0')
        try:
            parts = score.split(':')
            if len(parts) == 2:
                goals1, goals2 = int(parts[0]), int(parts[1])
                if goals1 > goals2:
                    return "–ü1"
                elif goals2 > goals1:
                    return "–ü2"
        except:
            pass
        
        return "–ü1"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _get_tennis_bet_recommendation(self, match: Dict[str, Any]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞
        """
        sets_score = match.get('sets_score', '0-0')
        player1 = match.get('player1', '–ò–≥—Ä–æ–∫ 1')
        
        try:
            parts = sets_score.split('-')
            if len(parts) == 2:
                sets1, sets2 = int(parts[0]), int(parts[1])
                if sets1 > sets2:
                    return f"–ü–æ–±–µ–¥–∞ {player1}"
                elif sets2 > sets1:
                    return f"–ü–æ–±–µ–¥–∞ {match.get('player2', '–ò–≥—Ä–æ–∫ 2')}"
        except:
            pass
        
        return f"–ü–æ–±–µ–¥–∞ {player1}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _get_table_tennis_bet_recommendation(self, match: Dict[str, Any]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞
        """
        sets_score = match.get('sets_score', '0-0')
        player1 = match.get('player1', '–ò–≥—Ä–æ–∫ 1')
        
        try:
            parts = sets_score.split('-')
            if len(parts) == 2:
                sets1, sets2 = int(parts[0]), int(parts[1])
                if sets1 > sets2:
                    return f"–ü–æ–±–µ–¥–∞ {player1}"
        except:
            pass
        
        return f"–ü–æ–±–µ–¥–∞ {player1}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _get_handball_bet_recommendation(self, match: Dict[str, Any]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞
        """
        score = match.get('score', '0:0')
        try:
            parts = score.split(':')
            if len(parts) == 2:
                goals1, goals2 = int(parts[0]), int(parts[1])
                if goals1 > goals2:
                    return "–ü1"
                elif goals2 > goals1:
                    return "–ü2"
        except:
            pass
        
        return "–ü1"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _get_best_odds(self, match: Dict[str, Any], bet_type: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏
        """
        odds_data = match.get('odds', {})
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        for market, values in odds_data.items():
            if isinstance(values, list) and len(values) >= 2:
                if '–ü1' in bet_type or '–ü–æ–±–µ–¥–∞' in bet_type:
                    return values[0] if values[0] else '1.50'
                elif '–ü2' in bet_type:
                    return values[1] if len(values) > 1 and values[1] else '1.50'
        
        return '1.50'  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _calculate_remaining_time(self, current_time: str, sport: str) -> str:
        """
        –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞
        """
        if sport == 'football':
            try:
                minute = int(re.search(r'(\d+)', current_time).group(1))
                remaining = 90 - minute
                if remaining > 0:
                    return f"~{remaining} –º–∏–Ω."
                else:
                    return "–î–æ–ø. –≤—Ä–µ–º—è"
            except:
                pass
        
        return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    
    def _send_message(self, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        """
        try:
            payload = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(f"{self.api_url}/sendMessage", json=payload)
            
            if response.status_code == 200:
                self.logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                return True
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    def _escape_markdown_v2(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
        """
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
        escape_chars = ['_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def _send_no_matches_message(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π
        """
        current_time = format_moscow_time()
        next_check_time = self._calculate_next_check_time()
        
        message = f"""
üîç –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö LIVE-—Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_check_time}

üíé @TrueLiveBet ‚Äì –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
        """.strip()
        
        return self._send_message(message)
    
    def _calculate_next_check_time(self) -> str:
        """
        –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        from datetime import datetime, timedelta
        from config import CYCLE_INTERVAL_MINUTES
        
        next_time = datetime.now() + timedelta(minutes=CYCLE_INTERVAL_MINUTES)
        return next_time.strftime('%H:%M –ú–°–ö')
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
        """
        try:
            response = requests.get(f"{self.api_url}/getMe")
            if response.status_code == 200:
                bot_info = response.json()
                self.logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: {bot_info.get('result', {}).get('username', 'Unknown')}")
                return True
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {response.status_code}")
                return False
        except Exception as e:
            self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram API: {e}")
            return False