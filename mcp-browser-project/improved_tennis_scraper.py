"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom
"""
import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import re
import json
from datetime import datetime
from typing import List, Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('improved_tennis_scraper')

class ImprovedTennisScraper:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom"""
    
    def __init__(self, logger):
        self.logger = logger
        self.driver = None
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.logger.info("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                self.logger.info("üîå –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
    
    def navigate_to_tennis(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞"""
        try:
            url = "https://betboom.ru/sport/tennis?type=live"
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(10)
            
            self.logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False
    
    def get_page_content(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            self.logger.info("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            content = self.driver.page_source
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return content
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    def extract_tennis_data_from_scripts(self) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JavaScript"""
        try:
            self.logger.info("üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript...")
            
            # –ò—â–µ–º –≤—Å–µ script —Ç–µ–≥–∏
            scripts = self.driver.find_elements(By.TAG_NAME, "script")
            
            for script in scripts:
                try:
                    script_content = script.get_attribute("innerHTML")
                    if script_content and ("tennis" in script_content.lower() or "wta" in script_content.lower() or "atp" in script_content.lower()):
                        self.logger.info("–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç —Å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –¥–∞–Ω–Ω—ã–µ
                        json_matches = re.findall(r'\{[^{}]*"tennis"[^{}]*\}', script_content)
                        for json_match in json_matches:
                            try:
                                data = json.loads(json_match)
                                self.logger.info(f"–ù–∞–π–¥–µ–Ω—ã JSON –¥–∞–Ω–Ω—ã–µ: {data}")
                            except:
                                pass
                        
                        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞—Ç—á–µ–π
                        match_patterns = [
                            r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+vs\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)',
                            r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)',
                            r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+-\d+)'
                        ]
                        
                        for pattern in match_patterns:
                            matches = re.findall(pattern, script_content)
                            if matches:
                                self.logger.info(f"–ù–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {matches}")
                                return self.parse_script_matches(matches)
                
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
                    continue
            
            return []
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
            return []
    
    def parse_script_matches(self, matches) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        tennis_matches = []
        
        for match in matches:
            try:
                if len(match) >= 2:
                    player1 = match[0].strip()
                    player2 = match[1].strip()
                    
                    score = " ".join(match[2:]) if len(match) > 2 else "LIVE"
                    
                    if self.is_non_tie_score(score):
                        tennis_matches.append({
                            'player1': player1,
                            'player2': player2,
                            'score': score,
                            'status': 'LIVE',
                            'sport': 'tennis',
                            'source': 'betboom_script'
                        })
            
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–∞: {e}")
                continue
        
        return tennis_matches
    
    def find_tennis_matches_in_html(self) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π –≤ HTML"""
        try:
            self.logger.info("üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π –≤ HTML...")
            
            # –ü–æ–ª—É—á–∞–µ–º HTML
            html_content = self.driver.page_source
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            selectors = [
                '.sport-event',
                '.bet-item',
                '.match-item',
                '.game-item',
                '.event-item',
                '[class*="match"]',
                '[class*="game"]',
                '[class*="event"]',
                '[class*="live"]',
                '[class*="tennis"]',
                '[data-sport="tennis"]',
                '[data-sport="Tennis"]'
            ]
            
            found_elements = []
            
            for selector in selectors:
                elements = soup.select(selector)
                if elements:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    found_elements.extend(elements)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            if not found_elements:
                self.logger.info("–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É...")
                all_elements = soup.find_all(text=re.compile(r'(WTA|ATP|ITF|—Ç–µ–Ω–Ω–∏—Å|tennis|—Å–µ—Ç|set)', re.IGNORECASE))
                for element in all_elements:
                    parent = element.parent
                    if parent and parent not in found_elements:
                        found_elements.append(parent)
            
            # –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            matches = []
            for element in found_elements[:100]:
                try:
                    match_data = self.extract_match_data(element)
                    if match_data:
                        matches.append(match_data)
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
            
            return matches
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –≤ HTML: {e}")
            return []
    
    def extract_match_data(self, element) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            text = element.get_text(strip=True)
            
            if len(text) < 10 or len(text) > 500:
                return None
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π
            patterns = [
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)',
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+-\d+)\s+(\d+-\d+)',
                r'([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+([A-Za-z–ê-–Ø–∞-—è\s\.]+)\s+(\d+)\s+(\d+)'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, text)
                if match:
                    groups = match.groups()
                    if len(groups) >= 2:
                        player1 = groups[0].strip()
                        player2 = groups[1].strip()
                        score = " ".join(groups[2:]) if len(groups) > 2 else "LIVE"
                        
                        if self.is_non_tie_score(score):
                            return {
                                'player1': player1,
                                'player2': player2,
                                'score': score,
                                'status': 'LIVE',
                                'sport': 'tennis',
                                'source': 'betboom_html',
                                'raw_text': text[:100] + "..." if len(text) > 100 else text
                            }
            
            return None
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: {e}")
            return None
    
    def is_non_tie_score(self, score: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—á–µ—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π –ø–æ —Å–µ—Ç–∞–º"""
        try:
            score = score.strip()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ—Ç–∞: —Ü–∏—Ñ—Ä–∞-—Ü–∏—Ñ—Ä–∞
            set_pattern = r'\d+-\d+'
            sets = re.findall(set_pattern, score)
            
            if not sets:
                numbers = re.findall(r'\d+', score)
                if len(numbers) >= 2:
                    return len(set(numbers)) > 1
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ç
            for set_score in sets:
                parts = set_score.split('-')
                if len(parts) == 2:
                    try:
                        score1 = int(parts[0])
                        score2 = int(parts[1])
                        
                        if score1 == score2:
                            return False
                        
                        if abs(score1 - score2) < 2:
                            return False
                            
                    except ValueError:
                        continue
            
            return True
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ '{score}': {e}")
            return False

def scrape_tennis_matches():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
    logger.info("üéæ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom")
    
    scraper = ImprovedTennisScraper(logger)
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        if not scraper.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
            return []
        
        logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞
        if not scraper.navigate_to_tennis():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞")
            return []
        
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        scraper.driver.save_screenshot("betboom_tennis_improved.png")
        logger.info("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content = scraper.get_page_content()
        if not content:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return []
        
        logger.info("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open("betboom_tennis_improved.html", "w", encoding="utf-8") as f:
            f.write(content)
        logger.info("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ betboom_tennis_improved.html")
        
        # –ò—â–µ–º –º–∞—Ç—á–∏ –≤ HTML
        html_matches = scraper.find_tennis_matches_in_html()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(html_matches)} –º–∞—Ç—á–µ–π –≤ HTML")
        
        # –ò—â–µ–º –º–∞—Ç—á–∏ –≤ JavaScript
        script_matches = scraper.extract_tennis_data_from_scripts()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(script_matches)} –º–∞—Ç—á–µ–π –≤ JavaScript")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_matches = html_matches + script_matches
        
        if all_matches:
            logger.info(f"üéæ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_matches)} —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "="*100)
            print("üéæ –£–õ–£–ß–®–ï–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–†–ê–ü–ò–ù–ì–ê –¢–ï–ù–ù–ò–°–ù–´–• –ú–ê–¢–ß–ï–ô –° BETBOOM")
            print("="*100)
            print(f"üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: https://betboom.ru/sport/tennis?type=live")
            print(f"üîß –ú–µ—Ç–æ–¥: –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium WebDriver")
            print("="*100)
            
            for i, match in enumerate(all_matches, 1):
                print(f"{i:2d}. {match['player1']} vs {match['player2']}")
                print(f"    –°—á–µ—Ç: {match['score']} ({match['status']})")
                print(f"    –°–ø–æ—Ä—Ç: {match['sport']} | –ò—Å—Ç–æ—á–Ω–∏–∫: {match['source']}")
                if 'raw_text' in match:
                    print(f"    Raw: {match['raw_text']}")
                print()
            
            print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_matches)} –º–∞—Ç—á–µ–π")
            print("="*100)
        else:
            logger.warning("‚ùå –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("\n‚ùå –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç live —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π")
            print("   - –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ JavaScript –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            print("   - –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞")
        
        return all_matches
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return []
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        scraper.close_driver()
        logger.info("üîå –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    scrape_tennis_matches()