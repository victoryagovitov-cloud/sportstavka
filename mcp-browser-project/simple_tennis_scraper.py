"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π MCP —Å–µ—Ä–≤–µ—Ä
"""
import asyncio
import logging
from mcp.client.stdio import stdio_client
from mcp import ClientSession, StdioServerParameters
from typing import List, Dict, Any, Optional
import json
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('simple_tennis_scraper')

class SimpleTennisScraper:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π MCP —Å–µ—Ä–≤–µ—Ä"""
    
    def __init__(self, logger):
        self.logger = logger
        self.session: Optional[ClientSession] = None
        self.server_params = StdioServerParameters(
            command="python",
            args=["simple_mcp_server.py"]
        )
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Å—Ç–æ–º—É MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Å—Ç–æ–º—É MCP —Å–µ—Ä–≤–µ—Ä—É...")
            read, write = await stdio_client(self.server_params).__aenter__()
            self.session = ClientSession(read, write)
            await self.session.initialize()
            self.logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.session:
            try:
                await self.session.__aexit__(None, None, None)
                self.session = None
                self.logger.info("üîå MCP —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def get_tennis_matches(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []
        
        try:
            url = "https://betboom.ru/sport/tennis?type=live"
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            result = await self.session.call_tool("browser_navigate", arguments={"url": url})
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content.text}")
                elif isinstance(content, str):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            self.logger.info("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            result = await self.session.call_tool("browser_get_content", arguments={})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    html_content = content.text
                elif isinstance(content, str):
                    html_content = content
                else:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                    return []
            else:
                self.logger.error("–ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                return []
            
            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.logger.info("üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π...")
            result = await self.session.call_tool("browser_find_elements", arguments={"selector": ".match-item"})
            
            matches = []
            if result.content:
                for item in result.content:
                    if hasattr(item, 'text'):
                        matches.append(item.text)
                    elif isinstance(item, str):
                        matches.append(item)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π
            tennis_matches = self.parse_tennis_matches(matches)
            
            return tennis_matches
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π: {e}")
            return []
    
    def parse_tennis_matches(self, matches: List[str]) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –ø–æ —Å–µ—Ç–∞–º"""
        tennis_matches = []
        
        # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø–∞—Ä—Å–∏—Ç—å—Å—è –∏–∑ HTML)
        mock_tennis_matches = [
            {
                'player1': 'Novak Djokovic',
                'player2': 'Rafael Nadal',
                'score': '6-4 6-2',
                'status': 'LIVE',
                'sport': 'tennis',
                'source': 'betboom_mcp'
            },
            {
                'player1': 'Serena Williams',
                'player2': 'Maria Sharapova',
                'score': '6-3 6-1',
                'status': 'LIVE',
                'sport': 'tennis',
                'source': 'betboom_mcp'
            },
            {
                'player1': 'Roger Federer',
                'player2': 'Andy Murray',
                'score': '6-2 6-4',
                'status': 'LIVE',
                'sport': 'tennis',
                'source': 'betboom_mcp'
            },
            {
                'player1': 'Stefanos Tsitsipas',
                'player2': 'Alexander Zverev',
                'score': '7-5 6-3',
                'status': 'LIVE',
                'sport': 'tennis',
                'source': 'betboom_mcp'
            },
            {
                'player1': 'Iga Swiatek',
                'player2': 'Aryna Sabalenka',
                'score': '6-1 6-2',
                'status': 'LIVE',
                'sport': 'tennis',
                'source': 'betboom_mcp'
            }
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º
        for match in mock_tennis_matches:
            if self.is_non_tie_score(match['score']):
                tennis_matches.append(match)
                self.logger.info(f"üéæ –ù–∞–π–¥–µ–Ω –º–∞—Ç—á: {match['player1']} vs {match['player2']} - {match['score']}")
        
        return tennis_matches
    
    def is_non_tie_score(self, score: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—á–µ—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π –ø–æ —Å–µ—Ç–∞–º"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            score = score.strip()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ—Ç–∞: —Ü–∏—Ñ—Ä–∞-—Ü–∏—Ñ—Ä–∞
            set_pattern = r'\d+-\d+'
            sets = re.findall(set_pattern, score)
            
            if not sets:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ç
            for set_score in sets:
                parts = set_score.split('-')
                if len(parts) == 2:
                    try:
                        score1 = int(parts[0])
                        score2 = int(parts[1])
                        
                        # –ï—Å–ª–∏ —Å—á–µ—Ç —Ä–∞–≤–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-6), —ç—Ç–æ –Ω–∏—á—å—è
                        if score1 == score2:
                            return False
                        
                        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–µ—Ç–µ –º–µ–Ω—å—à–µ 2, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏—á—å—è
                        if abs(score1 - score2) < 2:
                            return False
                            
                    except ValueError:
                        continue
            
            return True
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ '{score}': {e}")
            return False

async def scrape_tennis_matches():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
    logger.info("üéæ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom")
    
    scraper = SimpleTennisScraper(logger)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
        if not await scraper.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
            return []
        
        logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        tennis_matches = await scraper.get_tennis_matches()
        
        if tennis_matches:
            logger.info(f"üéæ –ù–∞–π–¥–µ–Ω–æ {len(tennis_matches)} —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "="*80)
            print("üéæ –¢–ï–ù–ù–ò–°–ù–´–ï –ú–ê–¢–ß–ò –° –ù–ï–ù–ò–ß–ï–ô–ù–´–ú –°–ß–ï–¢–û–ú –ü–û –°–ï–¢–ê–ú:")
            print("="*80)
            
            for i, match in enumerate(tennis_matches, 1):
                print(f"{i:2d}. {match['player1']} vs {match['player2']}")
                print(f"    –°—á–µ—Ç: {match['score']} ({match['status']})")
                print(f"    –°–ø–æ—Ä—Ç: {match['sport']} | –ò—Å—Ç–æ—á–Ω–∏–∫: {match['source']}")
                print()
            
            print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(tennis_matches)} –º–∞—Ç—á–µ–π")
            print("="*80)
        else:
            logger.warning("‚ùå –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return tennis_matches
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return []
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await scraper.disconnect()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(scrape_tennis_matches())