"""
Telegram —Ä–µ–ø–æ—Ä—Ç–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ Claude AI (–í–∞—Ä–∏–∞–Ω—Ç 2)
"""

import os
import logging
from typing import Optional, List, Dict, Any
from datetime import datetime
from telegram_bot.custom_message_formatter import CustomTelegramFormatter

try:
    from telegram import Bot
    from telegram.error import TelegramError
except ImportError:
    Bot = None
    TelegramError = Exception

class ClaudeTelegramReporter:
    """
    –†–µ–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ Claude AI –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã
    """
    
    def __init__(self, logger: Optional[logging.Logger] = None):
        self.logger = logger or logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
        self.custom_formatter = CustomTelegramFormatter(logger)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = None
        if self.bot_token and Bot:
            try:
                self.bot = Bot(token=self.bot_token)
                self.logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
        else:
            self.logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_config = {
            'max_message_length': 4096,  # –õ–∏–º–∏—Ç Telegram
            'split_long_messages': True,
            'add_timestamps': True,
            'use_markdown': True
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_stats = {
            'total_messages': 0,
            'successful_sends': 0,
            'failed_sends': 0,
            'total_characters': 0
        }
    
    def send_claude_analysis(self, claude_analysis: str, period: str, 
                           matches_count: int, total_available: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Claude AI –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
        """
        if not claude_analysis:
            self.logger.warning("–ü—É—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ Claude AI - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
            formatted_message = self._format_message_for_telegram(
                claude_analysis, period, matches_count, total_available
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = self._send_telegram_message(formatted_message)
            
            if success:
                self.logger.info(f"üì® –ê–Ω–∞–ª–∏–∑ Claude AI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª")
                self._update_send_stats(formatted_message, success=True)
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º")
                self._update_send_stats(formatted_message, success=False)
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {e}")
            return False
    
    def _format_message_for_telegram(self, claude_analysis: str, period: str,
                                   matches_count: int, total_available: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è Claude AI –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
        period_emojis = {
            'morning_low': 'üåÖ',
            'afternoon_high': '‚òÄÔ∏è',
            'evening_peak': 'üåÜ', 
            'late_evening': 'üåô'
        }
        
        period_emoji = period_emojis.get(period, 'üìä')
        current_time = datetime.now().strftime('%H:%M –ú–°–ö')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"""{period_emoji} –ê–ù–ê–õ–ò–ó CLAUDE AI

üìä –ú–∞—Ç—á–µ–π: {matches_count} –∏–∑ {total_available} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
‚è∞ –í—Ä–µ–º—è: {current_time}
üéØ –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤

{'='*40}"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∞–Ω–∞–ª–∏–∑ Claude AI)
        main_content = claude_analysis
        
        # –ü–æ–¥–≤–∞–ª
        footer = f"""{'='*40}

ü§ñ –ê–Ω–∞–ª–∏–∑: Claude AI (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: MarathonBet
üõ°Ô∏è –§–∏–ª–æ—Å–æ—Ñ–∏—è: –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
üí° –ü—Ä–∏–Ω—Ü–∏–ø: –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, —á–µ–º —Ä–∏—Å–∫–æ–≤–∞—Ç—å

üîî –ö–∞–Ω–∞–ª: @your_betting_channel"""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏
        full_message = f"{header}\n\n{main_content}\n\n{footer}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(full_message) > self.message_config['max_message_length']:
            # –û–±—Ä–µ–∑–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–≤–∞–ª
            available_length = (self.message_config['max_message_length'] - 
                              len(header) - len(footer) - 20)  # 20 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–ø–∞—Å
            
            truncated_content = main_content[:available_length] + "\n\n[...–∞–Ω–∞–ª–∏–∑ –æ–±—Ä–µ–∑–∞–Ω...]"
            full_message = f"{header}\n\n{truncated_content}\n\n{footer}"
            
            self.logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ {len(full_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return full_message
    
    def _send_telegram_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
        """
        if not self.bot or not self.channel_id:
            # –î–µ–º–æ —Ä–µ–∂–∏–º - –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.logger.info("üé≠ –î–ï–ú–û –†–ï–ñ–ò–ú - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞:")
            self.logger.info("="*60)
            self.logger.info(message)
            self.logger.info("="*60)
            return True
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='HTML' if self.message_config['use_markdown'] else None,
                disable_web_page_preview=True
            )
            
            return True
            
        except TelegramError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def _update_send_stats(self, message: str, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.send_stats['total_messages'] += 1
        self.send_stats['total_characters'] += len(message)
        
        if success:
            self.send_stats['successful_sends'] += 1
        else:
            self.send_stats['failed_sends'] += 1
    
    def get_send_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        success_rate = 0.0
        if self.send_stats['total_messages'] > 0:
            success_rate = (self.send_stats['successful_sends'] / 
                          self.send_stats['total_messages']) * 100
        
        avg_message_length = 0
        if self.send_stats['total_messages'] > 0:
            avg_message_length = (self.send_stats['total_characters'] / 
                                self.send_stats['total_messages'])
        
        return {
            'total_messages': self.send_stats['total_messages'],
            'successful_sends': self.send_stats['successful_sends'],
            'failed_sends': self.send_stats['failed_sends'],
            'success_rate': round(success_rate, 2),
            'total_characters': self.send_stats['total_characters'],
            'average_message_length': round(avg_message_length, 2),
            'bot_available': self.bot is not None
        }
    
    def test_telegram_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º"""
        if not self.bot:
            self.logger.info("üé≠ Telegram –±–æ—Ç –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")
            return True
        
        try:
            # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id=self.channel_id,
                text="üß™ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–æ–º"
            )
            
            self.logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
def create_claude_telegram_reporter(logger: Optional[logging.Logger] = None) -> ClaudeTelegramReporter:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è Claude AI"""
    return ClaudeTelegramReporter(logger)