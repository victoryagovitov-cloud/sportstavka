#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
"""

import os
import sys
import logging
from datetime import datetime

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('production.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π"""
    
    required_keys = {
        'CLAUDE_API_KEY': '–ö–ª—é—á Claude AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
        'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'TELEGRAM_CHAT_ID': 'ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'
    }
    
    missing_keys = []
    
    for key, description in required_keys.items():
        if not os.getenv(key):
            missing_keys.append(f"‚ùå {key}: {description}")
        else:
            print(f"‚úÖ {key}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    return missing_keys

def test_data_collection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        print("\nüîç –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•:")
        print("-" * 30)
        
        # –¢–µ—Å—Ç —Ñ—É—Ç–±–æ–ª–∞
        import subprocess
        result = subprocess.run([sys.executable, 'final_all_sports_data.py'], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            output_lines = result.stdout.split('\n')
            
            # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for line in output_lines:
                if '–í–°–ï–ì–û –ì–û–¢–û–í–û' in line:
                    print(f"‚úÖ {line.strip()}")
                    break
            else:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    return True

def test_claude_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ Claude AI"""
    
    try:
        print("\nüß† –¢–ï–°–¢ CLAUDE AI:")
        print("-" * 20)
        
        if not os.getenv('CLAUDE_API_KEY'):
            print("‚ö†Ô∏è CLAUDE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º")
            return True
        
        from ai_analyzer.claude_analyzer_v2 import ClaudeAnalyzerV2
        
        logger = logging.getLogger(__name__)
        claude = ClaudeAnalyzerV2(logger)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á
        test_matches = [{
            'team1': '–ö–æ–º–∞–Ω–¥–∞ –ê',
            'team2': '–ö–æ–º–∞–Ω–¥–∞ –ë', 
            'score': '1:0',
            'time': '45:00',
            'odds': {'–ü1': '2.10', 'X': '3.20', '–ü2': '3.50'}
        }]
        
        result = claude.analyze_matches_independently(test_matches)
        
        if result:
            print("‚úÖ Claude AI –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Claude AI –∞–Ω–∞–ª–∏–∑–æ–º")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Claude AI: {e}")
        return False

def test_telegram_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Telegram"""
    
    try:
        print("\nüì± –¢–ï–°–¢ TELEGRAM:")
        print("-" * 20)
        
        if not os.getenv('TELEGRAM_BOT_TOKEN'):
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º")
            return True
        
        from telegram_bot.claude_telegram_reporter import ClaudeTelegramReporter
        
        logger = logging.getLogger(__name__)
        telegram = ClaudeTelegramReporter(logger)
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_analysis = {
            'analysis_summary': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã',
            'recommendations': ['–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'],
            'total_matches': 1
        }
        
        result = telegram.send_claude_analysis(test_analysis)
        
        if result:
            print("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def run_production_cycle():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω —Ü–∏–∫–ª"""
    
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–ê–ö–®–ù –¶–ò–ö–õ–ê:")
        print("-" * 30)
        
        from main import SportsAnalyzer
        
        logger = setup_logging()
        analyzer = SportsAnalyzer(logger)
        
        # –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        analyzer.run_smart_cycle()
        
        print("‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Ü–∏–∫–ª–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    print("üöÄ –ë–´–°–¢–†–´–ô –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –í –ü–†–û–î–ê–ö–®–ù")
    print("=" * 50)
    
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
    print("-" * 35)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    missing_keys = check_api_keys()
    
    if missing_keys:
        print("\n‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–¢ API –ö–õ–Æ–ß–ò:")
        for key in missing_keys:
            print(f"   {key}")
        
        print("\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ Claude API –∫–ª—é—á: https://console.anthropic.com/")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞: @BotFather")
        print("   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("      export CLAUDE_API_KEY='your_key'")
        print("      export TELEGRAM_BOT_TOKEN='your_token'")
        print("      export TELEGRAM_CHAT_ID='your_channel_id'")
        print("\nüîÑ –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    print("-" * 30)
    
    tests = [
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_data_collection),
        ("Claude AI –∞–Ω–∞–ª–∏–∑", test_claude_analysis),
        ("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_telegram_integration)
    ]
    
    all_tests_passed = True
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –†–ê–ë–û–¢–ê–ï–¢")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–ë–õ–ï–ú–ê")
                all_tests_passed = False
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            all_tests_passed = False
    
    # 3. –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Ü–∏–∫–ª–∞
    if all_tests_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–†–û–î–ê–ö–®–ù –¶–ò–ö–õ...")
        
        if run_production_cycle():
            print("\nüèÜ –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê!")
            print("\nüí∞ –ì–û–¢–û–í–ê –ö –ó–ê–†–ê–ë–û–¢–ö–£:")
            print("   ‚Ä¢ 28 –Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö –º–∞—Ç—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è")
            print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram")
            print("   ‚Ä¢ –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç")
            print("   ‚Ä¢ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ production.log")
            
            print("\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ Telegram –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π —á–∞—Å")
            print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ñ–∞–π–ª production.log")
            print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
            
            print("\nüéØ –£–°–ü–ï–®–ù–û–ì–û –ó–ê–†–ê–ë–û–¢–ö–ê!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Ü–∏–∫–ª–∞")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == '__main__':
    main()