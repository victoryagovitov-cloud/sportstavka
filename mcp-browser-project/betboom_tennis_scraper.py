"""
–°–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom —á–µ—Ä–µ–∑ MCP Browser
"""
import asyncio
import logging
from mcp.client.stdio import stdio_client
from mcp import ClientSession, StdioServerParameters
from typing import List, Dict, Any, Optional
import json
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('betboom_tennis_scraper')

class BetBoomTennisScraper:
    """–°–∫—Ä–∞–ø–µ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom —á–µ—Ä–µ–∑ MCP Browser"""
    
    def __init__(self, logger):
        self.logger = logger
        self.session: Optional[ClientSession] = None
        self.server_params = StdioServerParameters(
            command="python",
            args=["-c", "from browser_use.cli import main; main()", "--mcp"]
        )
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É browser-use...")
            read, write = await stdio_client(self.server_params).__aenter__()
            self.session = ClientSession(read, write)
            await self.session.initialize()
            self.logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.session:
            try:
                await self.session.__aexit__(None, None, None)
                self.session = None
                self.logger.info("üîå MCP —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def navigate_to_tennis(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            url = "https://betboom.ru/sport/tennis?type=live"
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            result = await self.session.call_tool("browser_navigate", arguments={"url": url})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content.text}")
                    return "success" in content.text.lower()
                elif isinstance(content, str):
                    self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {content}")
                    return "success" in content.lower()
            
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_page_content(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        
        try:
            self.logger.info("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            result = await self.session.call_tool("browser_get_content", arguments={})
            
            if result.content and len(result.content) > 0:
                content = result.content[0]
                if hasattr(content, 'text'):
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content.text
                elif isinstance(content, str):
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content
            
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    async def find_tennis_matches(self) -> List[str]:
        """–ü–æ–∏—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.session:
            self.logger.error("MCP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π
            selectors = [
                ".match-item",
                ".game-item", 
                ".event-item",
                "[class*='match']",
                "[class*='game']",
                "[class*='event']",
                "[class*='live']",
                ".sport-event",
                ".bet-item"
            ]
            
            all_matches = []
            
            for selector in selectors:
                try:
                    self.logger.info(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {selector}")
                    result = await self.session.call_tool("browser_find_elements", arguments={"selector": selector})
                    
                    if result.content:
                        for item in result.content:
                            if hasattr(item, 'text') and item.text:
                                all_matches.append(item.text)
                            elif isinstance(item, str) and item:
                                all_matches.append(item)
                    
                    if all_matches:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_matches)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        break
                        
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            return all_matches
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π: {e}")
            return []
    
    def parse_tennis_matches(self, matches: List[str]) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –ø–æ —Å–µ—Ç–∞–º"""
        tennis_matches = []
        
        for match_text in matches:
            try:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π
                # –§–æ—Ä–º–∞—Ç: "–ò–≥—Ä–æ–∫1 vs –ò–≥—Ä–æ–∫2 - 6-4 6-2 (LIVE)" –∏–ª–∏ "–ò–≥—Ä–æ–∫1 - –ò–≥—Ä–æ–∫2 6-4 6-2"
                
                # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π
                patterns = [
                    r'([A-Za-z–ê-–Ø–∞-—è\s]+)\s+vs\s+([A-Za-z–ê-–Ø–∞-—è\s]+)\s*[-‚Äì]\s*(\d+-\d+(?:\s+\d+-\d+)*)',
                    r'([A-Za-z–ê-–Ø–∞-—è\s]+)\s*[-‚Äì]\s*([A-Za-z–ê-–Ø–∞-—è\s]+)\s+(\d+-\d+(?:\s+\d+-\d+)*)',
                    r'([A-Za-z–ê-–Ø–∞-—è\s]+)\s+([A-Za-z–ê-–Ø–∞-—è\s]+)\s+(\d+-\d+(?:\s+\d+-\d+)*)'
                ]
                
                for pattern in patterns:
                    match = re.search(pattern, match_text, re.IGNORECASE)
                    if match:
                        player1 = match.group(1).strip()
                        player2 = match.group(2).strip()
                        score = match.group(3).strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π —Å—á–µ—Ç –ø–æ —Å–µ—Ç–∞–º
                        if self.is_non_tie_score(score):
                            tennis_matches.append({
                                'player1': player1,
                                'player2': player2,
                                'score': score,
                                'status': 'LIVE',
                                'sport': 'tennis',
                                'source': 'betboom_mcp'
                            })
                            self.logger.info(f"üéæ –ù–∞–π–¥–µ–Ω –º–∞—Ç—á: {player1} vs {player2} - {score}")
                        break
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if any(word in match_text.lower() for word in ['tennis', '—Ç–µ–Ω–Ω–∏—Å', 'set', '—Å–µ—Ç']):
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    parts = match_text.split(' - ')
                    if len(parts) >= 2:
                        players_part = parts[0]
                        score_part = parts[1]
                        
                        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤
                        if ' vs ' in players_part:
                            players = players_part.split(' vs ')
                        elif ' - ' in players_part:
                            players = players_part.split(' - ')
                        else:
                            continue
                        
                        if len(players) == 2:
                            player1 = players[0].strip()
                            player2 = players[1].strip()
                            
                            # –ò—â–µ–º —Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 6-4 6-2
                            score_match = re.search(r'(\d+-\d+(?:\s+\d+-\d+)*)', score_part)
                            if score_match:
                                score = score_match.group(1)
                                if self.is_non_tie_score(score):
                                    tennis_matches.append({
                                        'player1': player1,
                                        'player2': player2,
                                        'score': score,
                                        'status': 'LIVE',
                                        'sport': 'tennis',
                                        'source': 'betboom_mcp'
                                    })
                                    self.logger.info(f"üéæ –ù–∞–π–¥–µ–Ω –º–∞—Ç—á: {player1} vs {player2} - {score}")
            
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–∞ '{match_text}': {e}")
                continue
        
        return tennis_matches
    
    def is_non_tie_score(self, score: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—á–µ—Ç –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π –ø–æ —Å–µ—Ç–∞–º"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            score = score.strip()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ—Ç–∞: —Ü–∏—Ñ—Ä–∞-—Ü–∏—Ñ—Ä–∞
            set_pattern = r'\d+-\d+'
            sets = re.findall(set_pattern, score)
            
            if not sets:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ç
            for set_score in sets:
                parts = set_score.split('-')
                if len(parts) == 2:
                    try:
                        score1 = int(parts[0])
                        score2 = int(parts[1])
                        
                        # –ï—Å–ª–∏ —Å—á–µ—Ç —Ä–∞–≤–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-6), —ç—Ç–æ –Ω–∏—á—å—è
                        if score1 == score2:
                            return False
                        
                        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–µ—Ç–µ –º–µ–Ω—å—à–µ 2, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏—á—å—è
                        if abs(score1 - score2) < 2:
                            return False
                            
                    except ValueError:
                        continue
            
            return True
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ '{score}': {e}")
            return False

async def scrape_tennis_matches():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
    logger.info("üéæ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å BetBoom")
    
    scraper = BetBoomTennisScraper(logger)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
        if not await scraper.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
            return []
        
        logger.info("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞
        if not await scraper.navigate_to_tennis():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞")
            return []
        
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–Ω–∏—Å–∞")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await asyncio.sleep(5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content = await scraper.get_page_content()
        if not content:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return []
        
        logger.info("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω–æ")
        
        # –ò—â–µ–º –º–∞—Ç—á–∏
        matches = await scraper.find_tennis_matches()
        if not matches:
            logger.warning("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏
        tennis_matches = scraper.parse_tennis_matches(matches)
        
        if tennis_matches:
            logger.info(f"üéæ –ù–∞–π–¥–µ–Ω–æ {len(tennis_matches)} —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, match in enumerate(tennis_matches, 1):
                logger.info(f"  {i}. {match['player1']} vs {match['player2']} - {match['score']} ({match['status']})")
        else:
            logger.warning("‚ùå –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–∞—Ç—á–∏ —Å –Ω–µ–Ω–∏—á–µ–π–Ω—ã–º —Å—á–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return tennis_matches
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return []
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await scraper.disconnect()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(scrape_tennis_matches())