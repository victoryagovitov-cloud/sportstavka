#!/usr/bin/env python3
"""
–î–µ–º–æ-–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ë–ï–ó API –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
from datetime import datetime

def setup_demo_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def demo_data_collection():
    """–î–µ–º–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîç –î–ï–ú–û: –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ö–¢–£–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        import subprocess
        import sys
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        result = subprocess.run([sys.executable, 'final_all_sports_data.py'], 
                              capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = result.stdout
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            lines = output.split('\n')
            for line in lines:
                if '–í–°–ï–ì–û –ì–û–¢–û–í–û' in line:
                    print(f"‚úÖ {line.strip()}")
                elif '–Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö' in line.lower() and any(sport in line for sport in ['–§—É—Ç–±–æ–ª', '–¢–µ–Ω–Ω–∏—Å', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π', '–ì–∞–Ω–¥–±–æ–ª']):
                    print(f"üìä {line.strip()}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ-—Å–±–æ—Ä–∞: {e}")
        return False

def demo_claude_analysis():
    """–î–µ–º–æ –∞–Ω–∞–ª–∏–∑ Claude AI"""
    
    print("\nüß† –î–ï–ú–û: –ê–ù–ê–õ–ò–ó CLAUDE AI")
    print("-" * 25)
    
    try:
        from ai_analyzer.claude_analyzer_v2 import ClaudeAnalyzerV2
        
        logger = setup_demo_logging()
        claude = ClaudeAnalyzerV2(logger)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
        demo_matches = [
            {
                'team1': '–°–∞–π—Ö–∞–º–∞–∫–∞–≤–Ω',
                'team2': '–°–ò–°',
                'score': '2:1',
                'time': '42:15',
                'league': '–ò–Ω–¥–∏—è. –ú–∏–∑–æ—Ä–∞–º. –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞',
                'odds': {'–ü1': '2.10', 'X': '3.20', '–ü2': '3.50'},
                'sport': 'football'
            },
            {
                'player1': '–ö–∞—Å—Ç–µ–ª—å–Ω—É–æ–≤–æ, –õ—É–∫–∞',
                'player2': '–Ø—Å–∏–∫–∞, –û–º–∞—Ä', 
                'score': '1:0 (7:6)',
                'time': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                'tournament': 'WTA/ATP',
                'odds': {'–ü1': '1.85', '–ü2': '1.95'},
                'sport': 'tennis'
            },
            {
                'team1': '–ù–∞—Ä—Ç–æ–≤–∞, –°–≤–µ—Ç–ª–∞–Ω–∞',
                'team2': '–ö–∞–∑–∞–Ω—Ü–µ–≤–∞, –ê—Ä–∏–Ω–∞',
                'score': '3:2',
                'time': '2:11',
                'tournament': '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å',
                'odds': {'–ü1': '1.75', '–ü2': '2.05'},
                'sport': 'table_tennis'
            }
        ]
        
        # –î–µ–º–æ –∞–Ω–∞–ª–∏–∑
        analysis_result = claude.analyze_matches_independently(demo_matches)
        
        if analysis_result:
            print("‚úÖ Claude AI –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: {len(demo_matches)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(analysis_result, dict):
                if 'analysis_summary' in analysis_result:
                    print(f"üìù –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑: {analysis_result['analysis_summary'][:100]}...")
                if 'recommendations' in analysis_result:
                    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(analysis_result.get('recommendations', []))}")
            
            return True
        else:
            print("‚ö†Ô∏è –î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω (–±–µ–∑ API –∫–ª—é—á–∞)")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def demo_telegram_report():
    """–î–µ–º–æ –æ—Ç—á–µ—Ç Telegram"""
    
    print("\nüì± –î–ï–ú–û: TELEGRAM –û–¢–ß–ï–¢")
    print("-" * 25)
    
    try:
        from telegram_bot.claude_telegram_reporter import ClaudeTelegramReporter
        
        logger = setup_demo_logging()
        telegram = ClaudeTelegramReporter(logger)
        
        # –î–µ–º–æ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        demo_analysis = {
            'analysis_summary': '–î–µ–º–æ-–∞–Ω–∞–ª–∏–∑: –Ω–∞–π–¥–µ–Ω–æ 3 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–∞',
            'recommendations': [
                'üü¢ –°–∞–π—Ö–∞–º–∞–∫–∞–≤–Ω vs –°–ò–° - –°–¢–ê–í–ö–ê –Ω–∞ –ü1 (–ª–∏–¥–µ—Ä —É–¥–µ—Ä–∂–∏—Ç)',
                'üü° –ö–∞—Å—Ç–µ–ª—å–Ω—É–æ–≤–æ vs –Ø—Å–∏–∫–∞ - –°–¢–ê–í–ö–ê –Ω–∞ –ü1 (—Å–∏–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞)',
                'üü¢ –ù–∞—Ä—Ç–æ–≤–∞ vs –ö–∞–∑–∞–Ω—Ü–µ–≤–∞ - –°–¢–ê–í–ö–ê –Ω–∞ –ü1 (–æ–ø—ã—Ç)'
            ],
            'total_matches': 3,
            'risk_distribution': {'–Ω–∏–∑–∫–∏–π': 2, '—Å—Ä–µ–¥–Ω–∏–π': 1, '–≤—ã—Å–æ–∫–∏–π': 0},
            'timestamp': datetime.now().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-–æ—Ç—á–µ—Ç–∞
        result = telegram.send_claude_analysis(demo_analysis)
        
        if result:
            print("‚úÖ Telegram –¥–µ–º–æ-–æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è Telegram –¥–µ–º–æ-—Ä–µ–∂–∏–º (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ-–æ—Ç—á–µ—Ç–∞: {e}")
        return False

def main():
    """–î–µ–º–æ-–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß™ –î–ï–ú–û-–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –°–ü–û–†–¢–ò–í–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 55)
    
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"üïê –í—Ä–µ–º—è –¥–µ–º–æ-–∑–∞–ø—É—Å–∫–∞: {current_time}")
    
    print("\nüéØ –î–ï–ú–û-–†–ï–ñ–ò–ú: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó API –ö–õ–Æ–ß–ï–ô")
    print("-" * 45)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    tests = [
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", demo_data_collection),
        ("–ê–Ω–∞–ª–∏–∑ Claude AI", demo_claude_analysis), 
        ("–û—Ç—á–µ—Ç Telegram", demo_telegram_report)
    ]
    
    all_passed = True
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –†–ê–ë–û–¢–ê–ï–¢")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–ë–õ–ï–ú–ê")
                all_passed = False
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            all_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–ú–û-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 35)
    
    if all_passed:
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        print("\n‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:")
        print("   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ 28 –Ω–µ–Ω–∏—á–µ–π–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞: ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚Ä¢ Claude AI: ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–Ω—É–∂–µ–Ω API –∫–ª—é—á)")
        print("   ‚Ä¢ Telegram: ‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω)")
        
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –ó–ê–†–ê–ë–û–¢–ö–ê:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ Claude API –∫–ª—é—á (console.anthropic.com)")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞ (@BotFather)")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python quick_start.py")
        print("   5. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –º–∞–ª—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏!")
        
        print("\nüí∞ –ü–û–¢–ï–ù–¶–ò–ê–õ –ó–ê–†–ê–ë–û–¢–ö–ê:")
        print("   ‚Ä¢ 28 –º–∞—Ç—á–µ–π –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç")
        print("   ‚Ä¢ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ: 5-10% –≤ –º–µ—Å—è—Ü")
        print("   ‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ: 15-25% –≤ –º–µ—Å—è—Ü")
        
        print("\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–†–ê–ë–û–¢–ö–£!")
        
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")
    
    print(f"\nüìã –ü–û–õ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø: API_SETUP_GUIDE.md")
    print(f"üìã –ü–õ–ê–ù –ó–ê–ü–£–°–ö–ê: PRODUCTION_LAUNCH_PLAN.md")

if __name__ == '__main__':
    main()