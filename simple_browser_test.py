"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å BetBoom —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
–ë–µ–∑ MCP - –∏—Å–ø–æ–ª—å–∑—É–µ–º Selenium –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('browser_test')

class SimpleBetBoomScraper:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è BetBoom —á–µ—Ä–µ–∑ Selenium"""
    
    def __init__(self, logger):
        self.logger = logger
        self.driver = None
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            chrome_options = Options()
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--window-size=1920,1080')
            chrome_options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.logger.info("Chrome –¥—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            self.logger.info("Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    def scrape_url(self, url):
        """–°–∫—Ä–∞–ø–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL"""
        try:
            self.logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º HTML
            html = self.driver.page_source
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω HTML ({len(html)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            matches = self.parse_html(html, url)
            
            return {
                "success": True,
                "url": url,
                "matches": matches,
                "html_length": len(html)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ {url}: {e}")
            return {
                "success": False,
                "url": url,
                "error": str(e)
            }
    
    def parse_html(self, html, url):
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π"""
        matches = []
        
        try:
            soup = BeautifulSoup(html, 'html.parser')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞ –ø–æ URL
            sport = "football" if "football" in url else "tennis"
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–∞—Ç—á–∞–º–∏
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã - –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É BetBoom
            match_selectors = [
                '.match-item',
                '.game-item', 
                '.event-item',
                '[data-testid*="match"]',
                '[class*="match"]',
                '[class*="game"]',
                '[class*="event"]'
            ]
            
            for selector in match_selectors:
                elements = soup.select(selector)
                if elements:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
                    for element in elements[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
                        try:
                            match_data = self.extract_match_data(element, sport)
                            if match_data:
                                matches.append(match_data)
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                            continue
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            if not matches:
                self.logger.info("–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É...")
                matches = self.find_matches_by_text(soup, sport)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
        
        return matches
    
    def extract_match_data(self, element, sport):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã/–∏–≥—Ä–æ–∫–æ–≤
            team_elements = element.find_all(['span', 'div', 'a'], class_=lambda x: x and any(
                word in x.lower() for word in ['team', 'player', 'name', 'title']
            ))
            
            if len(team_elements) >= 2:
                team1 = team_elements[0].get_text(strip=True)
                team2 = team_elements[1].get_text(strip=True)
                
                # –ò—â–µ–º —Å—á–µ—Ç
                score_elements = element.find_all(['span', 'div'], class_=lambda x: x and any(
                    word in x.lower() for word in ['score', 'result', 'count']
                ))
                score = score_elements[0].get_text(strip=True) if score_elements else "LIVE"
                
                # –ò—â–µ–º –≤—Ä–µ–º—è
                time_elements = element.find_all(['span', 'div'], class_=lambda x: x and any(
                    word in x.lower() for word in ['time', 'minute', 'clock']
                ))
                time_str = time_elements[0].get_text(strip=True) if time_elements else "LIVE"
                
                return {
                    'team1': team1,
                    'team2': team2,
                    'score': score,
                    'time': time_str,
                    'sport': sport,
                    'source': 'selenium_betboom'
                }
        
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: {e}")
        
        return None
    
    def find_matches_by_text(self, soup, sport):
        """–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É (fallback –º–µ—Ç–æ–¥)"""
        matches = []
        
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2" –∏–ª–∏ "–ò–≥—Ä–æ–∫1 vs –ò–≥—Ä–æ–∫2"
            text = soup.get_text()
            lines = text.split('\\n')
            
            for line in lines:
                line = line.strip()
                if len(line) > 10 and len(line) < 200:  # –†–∞–∑—É–º–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω –º–∞—Ç—á–∞
                    if any(word in line.lower() for word in ['vs', 'v', '–ø—Ä–æ—Ç–∏–≤', '-']):
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—ã
                        parts = line.split(' vs ')
                        if len(parts) == 2:
                            team1 = parts[0].strip()
                            team2 = parts[1].strip()
                            
                            matches.append({
                                'team1': team1,
                                'team2': team2,
                                'score': 'LIVE',
                                'time': 'LIVE',
                                'sport': sport,
                                'source': 'selenium_betboom_text'
                            })
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
        
        return matches

def test_betboom_urls():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL BetBoom"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BetBoom URLs")
    
    urls_to_test = [
        'https://betboom.ru/sport/football?type=live',
        'https://betboom.ru/sport/tennis?type=live'
    ]
    
    scraper = SimpleBetBoomScraper(logger)
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        if not scraper.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Chrome –¥—Ä–∞–π–≤–µ—Ä")
            return
        
        logger.info("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π URL
        for url in urls_to_test:
            logger.info(f"\\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")
            
            result = scraper.scrape_url(url)
            
            if result["success"]:
                matches = result["matches"]
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π
                for i, match in enumerate(matches[:5]):
                    logger.info(f"  {i+1}. {match['team1']} vs {match['team2']} - {match['score']} ({match['sport']})")
                
                if len(matches) > 5:
                    logger.info(f"  ... –∏ –µ—â–µ {len(matches) - 5} –º–∞—Ç—á–µ–π")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        scraper.close_driver()
        logger.info("\\nüîå Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    test_betboom_urls()